From fd2f8e642e53c6272df09f281cf03b234076cbc9 Mon Sep 17 00:00:00 2001
From: Pranav Vashi <neobuddy89@gmail.com>
Date: Wed, 26 Oct 2022 01:12:01 +0530
Subject: [PATCH 22/22] fixup! Update to jemalloc 5.2.1

Signed-off-by: Pranav Vashi <neobuddy89@gmail.com>
Change-Id: Ibc67851e15849a2ee80500d1fc3ef9ac3b897c70
---
 Android.bp                                    |    1 +
 include/jemalloc/internal/arena_stats.h       |    1 +
 include/jemalloc/internal/base_externs.h      |    5 +-
 include/jemalloc/internal/base_inlines.h      |    4 +
 include/jemalloc/internal/base_structs.h      |    4 +
 include/jemalloc/internal/base_types.h        |   26 +
 include/jemalloc/internal/ctl.h               |    1 +
 .../internal/jemalloc_internal_defs.h         |    8 +-
 .../internal/jemalloc_internal_defs.h.in      |    6 +
 .../internal/jemalloc_internal_defs_host.h    |    6 +
 include/jemalloc/internal/pages.h             |   15 +
 include/jemalloc/internal/private_namespace.h |    6 +
 .../jemalloc/internal/private_namespace_jet.h |    6 +
 include/jemalloc/internal/size_classes.h      | 1428 +++++++++++++++++
 src/arena.c                                   |    5 +-
 src/base.c                                    |   98 +-
 src/ctl.c                                     |   19 +
 src/extent.c                                  |    6 +-
 src/jemalloc.c                                |   43 +-
 src/pages.c                                   |  102 +-
 src/stats.c                                   |   14 +-
 test/unit/base.c                              |   24 +-
 test/unit/mallctl.c                           |    2 +
 test/unit/pages.c                             |   29 +
 24 files changed, 1838 insertions(+), 21 deletions(-)
 create mode 100644 include/jemalloc/internal/size_classes.h
 create mode 100644 test/unit/pages.c

diff --git a/Android.bp b/Android.bp
index 6a295326..a1b05b69 100644
--- a/Android.bp
+++ b/Android.bp
@@ -294,6 +294,7 @@ unit_tests = [
     "test/unit/mq.c",
     "test/unit/mtx.c",
     "test/unit/pack.c",
+    "test/unit/pages.c",
     "test/unit/ph.c",
     "test/unit/prng.c",
     "test/unit/prof_accum.c",
diff --git a/include/jemalloc/internal/arena_stats.h b/include/jemalloc/internal/arena_stats.h
index 50ec76a0..23949ed9 100644
--- a/include/jemalloc/internal/arena_stats.h
+++ b/include/jemalloc/internal/arena_stats.h
@@ -103,6 +103,7 @@ struct arena_stats_s {
 	atomic_zu_t		base; /* Derived. */
 	atomic_zu_t		internal;
 	atomic_zu_t		resident; /* Derived. */
+	atomic_zu_t		metadata_thp;
 
 	atomic_zu_t		allocated_large; /* Derived. */
 	arena_stats_u64_t	nmalloc_large; /* Derived. */
diff --git a/include/jemalloc/internal/base_externs.h b/include/jemalloc/internal/base_externs.h
index a4fd5ac7..7b705c9b 100644
--- a/include/jemalloc/internal/base_externs.h
+++ b/include/jemalloc/internal/base_externs.h
@@ -1,6 +1,9 @@
 #ifndef JEMALLOC_INTERNAL_BASE_EXTERNS_H
 #define JEMALLOC_INTERNAL_BASE_EXTERNS_H
 
+extern metadata_thp_mode_t opt_metadata_thp;
+extern const char *metadata_thp_mode_names[];
+
 base_t *b0get(void);
 base_t *base_new(tsdn_t *tsdn, unsigned ind, extent_hooks_t *extent_hooks);
 void base_delete(tsdn_t *tsdn, base_t *base);
@@ -10,7 +13,7 @@ extent_hooks_t *base_extent_hooks_set(base_t *base,
 void *base_alloc(tsdn_t *tsdn, base_t *base, size_t size, size_t alignment);
 extent_t *base_alloc_extent(tsdn_t *tsdn, base_t *base);
 void base_stats_get(tsdn_t *tsdn, base_t *base, size_t *allocated,
-    size_t *resident, size_t *mapped);
+    size_t *resident, size_t *mapped, size_t *n_thp);
 void base_prefork(tsdn_t *tsdn, base_t *base);
 void base_postfork_parent(tsdn_t *tsdn, base_t *base);
 void base_postfork_child(tsdn_t *tsdn, base_t *base);
diff --git a/include/jemalloc/internal/base_inlines.h b/include/jemalloc/internal/base_inlines.h
index 931560bf..aec0e2e1 100644
--- a/include/jemalloc/internal/base_inlines.h
+++ b/include/jemalloc/internal/base_inlines.h
@@ -6,4 +6,8 @@ base_ind_get(const base_t *base) {
 	return base->ind;
 }
 
+static inline bool
+metadata_thp_enabled(void) {
+	return (opt_metadata_thp != metadata_thp_disabled);
+}
 #endif /* JEMALLOC_INTERNAL_BASE_INLINES_H */
diff --git a/include/jemalloc/internal/base_structs.h b/include/jemalloc/internal/base_structs.h
index 0d729546..07f214eb 100644
--- a/include/jemalloc/internal/base_structs.h
+++ b/include/jemalloc/internal/base_structs.h
@@ -30,6 +30,8 @@ struct base_s {
 	/* Protects base_alloc() and base_stats_get() operations. */
 	malloc_mutex_t	mtx;
 
+	/* Using THP when true (metadata_thp auto mode). */
+	bool		auto_thp_switched;
 	/*
 	 * Most recent size class in the series of increasingly large base
 	 * extents.  Logarithmic spacing between subsequent allocations ensures
@@ -50,6 +52,8 @@ struct base_s {
 	size_t		allocated;
 	size_t		resident;
 	size_t		mapped;
+	/* Number of THP regions touched. */
+	size_t		n_thp;
 };
 
 #endif /* JEMALLOC_INTERNAL_BASE_STRUCTS_H */
diff --git a/include/jemalloc/internal/base_types.h b/include/jemalloc/internal/base_types.h
index be7ee825..b6db77df 100644
--- a/include/jemalloc/internal/base_types.h
+++ b/include/jemalloc/internal/base_types.h
@@ -4,4 +4,30 @@
 typedef struct base_block_s base_block_t;
 typedef struct base_s base_t;
 
+#define METADATA_THP_DEFAULT metadata_thp_disabled
+
+/*
+ * In auto mode, arenas switch to huge pages for the base allocator on the
+ * second base block.  a0 switches to thp on the 5th block (after 20 megabytes
+ * of metadata), since more metadata (e.g. rtree nodes) come from a0's base.
+ */
+
+#define BASE_AUTO_THP_THRESHOLD    2
+#define BASE_AUTO_THP_THRESHOLD_A0 5
+
+typedef enum {
+	metadata_thp_disabled   = 0,
+	/*
+	 * Lazily enable hugepage for metadata. To avoid high RSS caused by THP
+	 * + low usage arena (i.e. THP becomes a significant percentage), the
+	 * "auto" option only starts using THP after a base allocator used up
+	 * the first THP region.  Starting from the second hugepage (in a single
+	 * arena), "auto" behaves the same as "always", i.e. madvise hugepage
+	 * right away.
+	 */
+	metadata_thp_auto       = 1,
+	metadata_thp_always     = 2,
+	metadata_thp_mode_limit = 3
+} metadata_thp_mode_t;
+
 #endif /* JEMALLOC_INTERNAL_BASE_TYPES_H */
diff --git a/include/jemalloc/internal/ctl.h b/include/jemalloc/internal/ctl.h
index e359972f..987aa81e 100644
--- a/include/jemalloc/internal/ctl.h
+++ b/include/jemalloc/internal/ctl.h
@@ -51,6 +51,7 @@ typedef struct ctl_stats_s {
 	size_t allocated;
 	size_t active;
 	size_t metadata;
+	size_t metadata_thp;
 	size_t resident;
 	size_t mapped;
 	size_t retained;
diff --git a/include/jemalloc/internal/jemalloc_internal_defs.h b/include/jemalloc/internal/jemalloc_internal_defs.h
index db06385c..4dee8e74 100644
--- a/include/jemalloc/internal/jemalloc_internal_defs.h
+++ b/include/jemalloc/internal/jemalloc_internal_defs.h
@@ -291,7 +291,7 @@
  * Defined if transparent huge pages are supported via the MADV_[NO]HUGEPAGE
  * arguments to madvise(2).
  */
-/* #undef JEMALLOC_HAVE_MADVISE_HUGE */
+#define JEMALLOC_HAVE_MADVISE_HUGE 
 
 /*
  * Methods for purging unused pages differ between operating systems.
@@ -319,6 +319,12 @@
  */
 #define JEMALLOC_MADVISE_DONTDUMP 
 
+/*
+ * Defined if transparent huge pages (THPs) are supported via the
+ * MADV_[NO]HUGEPAGE arguments to madvise(2), and THP support is enabled.
+ */
+/* #undef JEMALLOC_THP */
+
 /* Define if operating system has alloca.h header. */
 #define JEMALLOC_HAS_ALLOCA_H 1
 
diff --git a/include/jemalloc/internal/jemalloc_internal_defs.h.in b/include/jemalloc/internal/jemalloc_internal_defs.h.in
index a0c7eec3..c442a219 100644
--- a/include/jemalloc/internal/jemalloc_internal_defs.h.in
+++ b/include/jemalloc/internal/jemalloc_internal_defs.h.in
@@ -290,6 +290,12 @@
  */
 #undef JEMALLOC_MADVISE_DONTDUMP
 
+/*
+ * Defined if transparent huge pages (THPs) are supported via the
+ * MADV_[NO]HUGEPAGE arguments to madvise(2), and THP support is enabled.
+ */
+#undef JEMALLOC_THP
+
 /* Define if operating system has alloca.h header. */
 #undef JEMALLOC_HAS_ALLOCA_H
 
diff --git a/include/jemalloc/internal/jemalloc_internal_defs_host.h b/include/jemalloc/internal/jemalloc_internal_defs_host.h
index 0e85fdfe..f4c973bf 100644
--- a/include/jemalloc/internal/jemalloc_internal_defs_host.h
+++ b/include/jemalloc/internal/jemalloc_internal_defs_host.h
@@ -302,6 +302,12 @@
  */
 /* #undef JEMALLOC_MADVISE_DONTDUMP */
 
+/*
+ * Defined if transparent huge pages (THPs) are supported via the
+ * MADV_[NO]HUGEPAGE arguments to madvise(2), and THP support is enabled.
+ */
+/* #undef JEMALLOC_THP */
+
 /* Define if operating system has alloca.h header. */
 #define JEMALLOC_HAS_ALLOCA_H 1
 
diff --git a/include/jemalloc/internal/pages.h b/include/jemalloc/internal/pages.h
index 224b3013..7dae633a 100644
--- a/include/jemalloc/internal/pages.h
+++ b/include/jemalloc/internal/pages.h
@@ -58,6 +58,20 @@ static const bool pages_can_purge_forced =
 #endif
     ;
 
+typedef enum {
+	thp_mode_default       = 0, /* Do not change hugepage settings. */
+	thp_mode_always        = 1, /* Always set MADV_HUGEPAGE. */
+	thp_mode_never         = 2, /* Always set MADV_NOHUGEPAGE. */
+
+	thp_mode_names_limit   = 3, /* Used for option processing. */
+	thp_mode_not_supported = 3  /* No THP support detected. */
+} thp_mode_t;
+
+#define THP_MODE_DEFAULT thp_mode_default
+extern thp_mode_t opt_thp;
+extern thp_mode_t init_system_thp_mode; /* Initial system wide state. */
+extern const char *thp_mode_names[];
+
 void *pages_map(void *addr, size_t size, size_t alignment, bool *commit);
 void pages_unmap(void *addr, size_t size);
 bool pages_commit(void *addr, size_t size);
@@ -69,5 +83,6 @@ bool pages_nohuge(void *addr, size_t size);
 bool pages_dontdump(void *addr, size_t size);
 bool pages_dodump(void *addr, size_t size);
 bool pages_boot(void);
+void pages_set_thp_state (void *ptr, size_t size);
 
 #endif /* JEMALLOC_INTERNAL_PAGES_EXTERNS_H */
diff --git a/include/jemalloc/internal/private_namespace.h b/include/jemalloc/internal/private_namespace.h
index 17d1475f..8744f167 100644
--- a/include/jemalloc/internal/private_namespace.h
+++ b/include/jemalloc/internal/private_namespace.h
@@ -116,6 +116,8 @@
 #define base_postfork_parent JEMALLOC_N(base_postfork_parent)
 #define base_prefork JEMALLOC_N(base_prefork)
 #define base_stats_get JEMALLOC_N(base_stats_get)
+#define metadata_thp_mode_names JEMALLOC_N(metadata_thp_mode_names)
+#define opt_metadata_thp JEMALLOC_N(opt_metadata_thp)
 #define bin_infos JEMALLOC_N(bin_infos)
 #define bin_init JEMALLOC_N(bin_init)
 #define bin_postfork_child JEMALLOC_N(bin_postfork_child)
@@ -249,6 +251,8 @@
 #define nstime_sec JEMALLOC_N(nstime_sec)
 #define nstime_subtract JEMALLOC_N(nstime_subtract)
 #define nstime_update JEMALLOC_N(nstime_update)
+#define init_system_thp_mode JEMALLOC_N(init_system_thp_mode)
+#define opt_thp JEMALLOC_N(opt_thp)
 #define pages_boot JEMALLOC_N(pages_boot)
 #define pages_commit JEMALLOC_N(pages_commit)
 #define pages_decommit JEMALLOC_N(pages_decommit)
@@ -259,7 +263,9 @@
 #define pages_nohuge JEMALLOC_N(pages_nohuge)
 #define pages_purge_forced JEMALLOC_N(pages_purge_forced)
 #define pages_purge_lazy JEMALLOC_N(pages_purge_lazy)
+#define pages_set_thp_state JEMALLOC_N(pages_set_thp_state)
 #define pages_unmap JEMALLOC_N(pages_unmap)
+#define thp_mode_names JEMALLOC_N(thp_mode_names)
 #define bt2gctx_mtx JEMALLOC_N(bt2gctx_mtx)
 #define bt_init JEMALLOC_N(bt_init)
 #define lg_prof_sample JEMALLOC_N(lg_prof_sample)
diff --git a/include/jemalloc/internal/private_namespace_jet.h b/include/jemalloc/internal/private_namespace_jet.h
index fce9a813..c745f6ea 100644
--- a/include/jemalloc/internal/private_namespace_jet.h
+++ b/include/jemalloc/internal/private_namespace_jet.h
@@ -117,6 +117,8 @@
 #define base_postfork_parent JEMALLOC_N(base_postfork_parent)
 #define base_prefork JEMALLOC_N(base_prefork)
 #define base_stats_get JEMALLOC_N(base_stats_get)
+#define metadata_thp_mode_names JEMALLOC_N(metadata_thp_mode_names)
+#define opt_metadata_thp JEMALLOC_N(opt_metadata_thp)
 #define bin_infos JEMALLOC_N(bin_infos)
 #define bin_init JEMALLOC_N(bin_init)
 #define bin_postfork_child JEMALLOC_N(bin_postfork_child)
@@ -252,6 +254,8 @@
 #define nstime_sec JEMALLOC_N(nstime_sec)
 #define nstime_subtract JEMALLOC_N(nstime_subtract)
 #define nstime_update JEMALLOC_N(nstime_update)
+#define init_system_thp_mode JEMALLOC_N(init_system_thp_mode)
+#define opt_thp JEMALLOC_N(opt_thp)
 #define pages_boot JEMALLOC_N(pages_boot)
 #define pages_commit JEMALLOC_N(pages_commit)
 #define pages_decommit JEMALLOC_N(pages_decommit)
@@ -262,7 +266,9 @@
 #define pages_nohuge JEMALLOC_N(pages_nohuge)
 #define pages_purge_forced JEMALLOC_N(pages_purge_forced)
 #define pages_purge_lazy JEMALLOC_N(pages_purge_lazy)
+#define pages_set_thp_state JEMALLOC_N(pages_set_thp_state)
 #define pages_unmap JEMALLOC_N(pages_unmap)
+#define thp_mode_names JEMALLOC_N(thp_mode_names)
 #define bt2gctx_mtx JEMALLOC_N(bt2gctx_mtx)
 #define bt_init JEMALLOC_N(bt_init)
 #define lg_prof_sample JEMALLOC_N(lg_prof_sample)
diff --git a/include/jemalloc/internal/size_classes.h b/include/jemalloc/internal/size_classes.h
new file mode 100644
index 00000000..0b7d3cd3
--- /dev/null
+++ b/include/jemalloc/internal/size_classes.h
@@ -0,0 +1,1428 @@
+#ifndef JEMALLOC_INTERNAL_SIZE_CLASSES_H
+#define JEMALLOC_INTERNAL_SIZE_CLASSES_H
+
+/* This file was automatically generated by size_classes.sh. */
+
+#include "jemalloc/internal/jemalloc_internal_types.h"
+
+/*
+ * This header file defines:
+ *
+ *   LG_SIZE_CLASS_GROUP: Lg of size class count for each size doubling.
+ *   LG_TINY_MIN: Lg of minimum size class to support.
+ *   SIZE_CLASSES: Complete table of SC(index, lg_grp, lg_delta, ndelta, psz,
+ *                 bin, pgs, lg_delta_lookup) tuples.
+ *     index: Size class index.
+ *     lg_grp: Lg group base size (no deltas added).
+ *     lg_delta: Lg delta to previous size class.
+ *     ndelta: Delta multiplier.  size == 1<<lg_grp + ndelta<<lg_delta
+ *     psz: 'yes' if a multiple of the page size, 'no' otherwise.
+ *     bin: 'yes' if a small bin size class, 'no' otherwise.
+ *     pgs: Slab page count if a small bin size class, 0 otherwise.
+ *     lg_delta_lookup: Same as lg_delta if a lookup table size class, 'no'
+ *                      otherwise.
+ *   NTBINS: Number of tiny bins.
+ *   NLBINS: Number of bins supported by the lookup table.
+ *   NBINS: Number of small size class bins.
+ *   NSIZES: Number of size classes.
+ *   LG_CEIL_NSIZES: Number of bits required to store NSIZES.
+ *   NPSIZES: Number of size classes that are a multiple of (1U << LG_PAGE).
+ *   LG_TINY_MAXCLASS: Lg of maximum tiny size class.
+ *   LOOKUP_MAXCLASS: Maximum size class included in lookup table.
+ *   SMALL_MAXCLASS: Maximum small size class.
+ *   LG_LARGE_MINCLASS: Lg of minimum large size class.
+ *   LARGE_MAXCLASS: Maximum (large) size class.
+ */
+
+#define LG_SIZE_CLASS_GROUP	2
+#define LG_TINY_MIN		3
+
+#if (LG_SIZEOF_PTR == 2 && LG_TINY_MIN == 3 && LG_QUANTUM == 3 && LG_PAGE == 12)
+#define SIZE_CLASSES \
+  /* index, lg_grp, lg_delta, ndelta, psz, bin, pgs, lg_delta_lookup */ \
+    SC(  0,      3,        3,      0,  no, yes,   1,  3) \
+    SC(  1,      3,        3,      1,  no, yes,   1,  3) \
+    SC(  2,      3,        3,      2,  no, yes,   3,  3) \
+    SC(  3,      3,        3,      3,  no, yes,   1,  3) \
+                                                         \
+    SC(  4,      5,        3,      1,  no, yes,   5,  3) \
+    SC(  5,      5,        3,      2,  no, yes,   3,  3) \
+    SC(  6,      5,        3,      3,  no, yes,   7,  3) \
+    SC(  7,      5,        3,      4,  no, yes,   1,  3) \
+                                                         \
+    SC(  8,      6,        4,      1,  no, yes,   5,  4) \
+    SC(  9,      6,        4,      2,  no, yes,   3,  4) \
+    SC( 10,      6,        4,      3,  no, yes,   7,  4) \
+    SC( 11,      6,        4,      4,  no, yes,   1,  4) \
+                                                         \
+    SC( 12,      7,        5,      1,  no, yes,   5,  5) \
+    SC( 13,      7,        5,      2,  no, yes,   3,  5) \
+    SC( 14,      7,        5,      3,  no, yes,   7,  5) \
+    SC( 15,      7,        5,      4,  no, yes,   1,  5) \
+                                                         \
+    SC( 16,      8,        6,      1,  no, yes,   5,  6) \
+    SC( 17,      8,        6,      2,  no, yes,   3,  6) \
+    SC( 18,      8,        6,      3,  no, yes,   7,  6) \
+    SC( 19,      8,        6,      4,  no, yes,   1,  6) \
+                                                         \
+    SC( 20,      9,        7,      1,  no, yes,   5,  7) \
+    SC( 21,      9,        7,      2,  no, yes,   3,  7) \
+    SC( 22,      9,        7,      3,  no, yes,   7,  7) \
+    SC( 23,      9,        7,      4,  no, yes,   1,  7) \
+                                                         \
+    SC( 24,     10,        8,      1,  no, yes,   5,  8) \
+    SC( 25,     10,        8,      2,  no, yes,   3,  8) \
+    SC( 26,     10,        8,      3,  no, yes,   7,  8) \
+    SC( 27,     10,        8,      4,  no, yes,   1,  8) \
+                                                         \
+    SC( 28,     11,        9,      1,  no, yes,   5,  9) \
+    SC( 29,     11,        9,      2,  no, yes,   3,  9) \
+    SC( 30,     11,        9,      3,  no, yes,   7,  9) \
+    SC( 31,     11,        9,      4, yes, yes,   1,  9) \
+                                                         \
+    SC( 32,     12,       10,      1,  no, yes,   5, no) \
+    SC( 33,     12,       10,      2,  no, yes,   3, no) \
+    SC( 34,     12,       10,      3,  no, yes,   7, no) \
+    SC( 35,     12,       10,      4, yes, yes,   2, no) \
+                                                         \
+    SC( 36,     13,       11,      1,  no, yes,   5, no) \
+    SC( 37,     13,       11,      2, yes, yes,   3, no) \
+    SC( 38,     13,       11,      3,  no, yes,   7, no) \
+    SC( 39,     13,       11,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 40,     14,       12,      1, yes,  no,   0, no) \
+    SC( 41,     14,       12,      2, yes,  no,   0, no) \
+    SC( 42,     14,       12,      3, yes,  no,   0, no) \
+    SC( 43,     14,       12,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 44,     15,       13,      1, yes,  no,   0, no) \
+    SC( 45,     15,       13,      2, yes,  no,   0, no) \
+    SC( 46,     15,       13,      3, yes,  no,   0, no) \
+    SC( 47,     15,       13,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 48,     16,       14,      1, yes,  no,   0, no) \
+    SC( 49,     16,       14,      2, yes,  no,   0, no) \
+    SC( 50,     16,       14,      3, yes,  no,   0, no) \
+    SC( 51,     16,       14,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 52,     17,       15,      1, yes,  no,   0, no) \
+    SC( 53,     17,       15,      2, yes,  no,   0, no) \
+    SC( 54,     17,       15,      3, yes,  no,   0, no) \
+    SC( 55,     17,       15,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 56,     18,       16,      1, yes,  no,   0, no) \
+    SC( 57,     18,       16,      2, yes,  no,   0, no) \
+    SC( 58,     18,       16,      3, yes,  no,   0, no) \
+    SC( 59,     18,       16,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 60,     19,       17,      1, yes,  no,   0, no) \
+    SC( 61,     19,       17,      2, yes,  no,   0, no) \
+    SC( 62,     19,       17,      3, yes,  no,   0, no) \
+    SC( 63,     19,       17,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 64,     20,       18,      1, yes,  no,   0, no) \
+    SC( 65,     20,       18,      2, yes,  no,   0, no) \
+    SC( 66,     20,       18,      3, yes,  no,   0, no) \
+    SC( 67,     20,       18,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 68,     21,       19,      1, yes,  no,   0, no) \
+    SC( 69,     21,       19,      2, yes,  no,   0, no) \
+    SC( 70,     21,       19,      3, yes,  no,   0, no) \
+    SC( 71,     21,       19,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 72,     22,       20,      1, yes,  no,   0, no) \
+    SC( 73,     22,       20,      2, yes,  no,   0, no) \
+    SC( 74,     22,       20,      3, yes,  no,   0, no) \
+    SC( 75,     22,       20,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 76,     23,       21,      1, yes,  no,   0, no) \
+    SC( 77,     23,       21,      2, yes,  no,   0, no) \
+    SC( 78,     23,       21,      3, yes,  no,   0, no) \
+    SC( 79,     23,       21,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 80,     24,       22,      1, yes,  no,   0, no) \
+    SC( 81,     24,       22,      2, yes,  no,   0, no) \
+    SC( 82,     24,       22,      3, yes,  no,   0, no) \
+    SC( 83,     24,       22,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 84,     25,       23,      1, yes,  no,   0, no) \
+    SC( 85,     25,       23,      2, yes,  no,   0, no) \
+    SC( 86,     25,       23,      3, yes,  no,   0, no) \
+    SC( 87,     25,       23,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 88,     26,       24,      1, yes,  no,   0, no) \
+    SC( 89,     26,       24,      2, yes,  no,   0, no) \
+    SC( 90,     26,       24,      3, yes,  no,   0, no) \
+    SC( 91,     26,       24,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 92,     27,       25,      1, yes,  no,   0, no) \
+    SC( 93,     27,       25,      2, yes,  no,   0, no) \
+    SC( 94,     27,       25,      3, yes,  no,   0, no) \
+    SC( 95,     27,       25,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 96,     28,       26,      1, yes,  no,   0, no) \
+    SC( 97,     28,       26,      2, yes,  no,   0, no) \
+    SC( 98,     28,       26,      3, yes,  no,   0, no) \
+    SC( 99,     28,       26,      4, yes,  no,   0, no) \
+                                                         \
+    SC(100,     29,       27,      1, yes,  no,   0, no) \
+    SC(101,     29,       27,      2, yes,  no,   0, no) \
+    SC(102,     29,       27,      3, yes,  no,   0, no) \
+    SC(103,     29,       27,      4, yes,  no,   0, no) \
+                                                         \
+    SC(104,     30,       28,      1, yes,  no,   0, no) \
+    SC(105,     30,       28,      2, yes,  no,   0, no) \
+    SC(106,     30,       28,      3, yes,  no,   0, no) \
+
+#define SIZE_CLASSES_DEFINED
+#define NTBINS			0
+#define NLBINS			32
+#define NBINS			39
+#define NSIZES			107
+#define LG_CEIL_NSIZES		7
+#define NPSIZES			71
+#define LG_TINY_MAXCLASS	"NA"
+#define LOOKUP_MAXCLASS		((((size_t)1) << 11) + (((size_t)4) << 9))
+#define SMALL_MAXCLASS		((((size_t)1) << 13) + (((size_t)3) << 11))
+#define LG_LARGE_MINCLASS	14
+#define LARGE_MINCLASS		(ZU(1) << LG_LARGE_MINCLASS)
+#define LARGE_MAXCLASS		((((size_t)1) << 30) + (((size_t)3) << 28))
+#endif
+
+#if (LG_SIZEOF_PTR == 2 && LG_TINY_MIN == 3 && LG_QUANTUM == 4 && LG_PAGE == 12)
+#define SIZE_CLASSES \
+  /* index, lg_grp, lg_delta, ndelta, psz, bin, pgs, lg_delta_lookup */ \
+    SC(  0,      3,        3,      0,  no, yes,   1,  3) \
+                                                         \
+    SC(  1,      3,        3,      1,  no, yes,   1,  3) \
+    SC(  2,      4,        4,      1,  no, yes,   1,  4) \
+    SC(  3,      4,        4,      2,  no, yes,   3,  4) \
+    SC(  4,      4,        4,      3,  no, yes,   1,  4) \
+                                                         \
+    SC(  5,      6,        4,      1,  no, yes,   5,  4) \
+    SC(  6,      6,        4,      2,  no, yes,   3,  4) \
+    SC(  7,      6,        4,      3,  no, yes,   7,  4) \
+    SC(  8,      6,        4,      4,  no, yes,   1,  4) \
+                                                         \
+    SC(  9,      7,        5,      1,  no, yes,   5,  5) \
+    SC( 10,      7,        5,      2,  no, yes,   3,  5) \
+    SC( 11,      7,        5,      3,  no, yes,   7,  5) \
+    SC( 12,      7,        5,      4,  no, yes,   1,  5) \
+                                                         \
+    SC( 13,      8,        6,      1,  no, yes,   5,  6) \
+    SC( 14,      8,        6,      2,  no, yes,   3,  6) \
+    SC( 15,      8,        6,      3,  no, yes,   7,  6) \
+    SC( 16,      8,        6,      4,  no, yes,   1,  6) \
+                                                         \
+    SC( 17,      9,        7,      1,  no, yes,   5,  7) \
+    SC( 18,      9,        7,      2,  no, yes,   3,  7) \
+    SC( 19,      9,        7,      3,  no, yes,   7,  7) \
+    SC( 20,      9,        7,      4,  no, yes,   1,  7) \
+                                                         \
+    SC( 21,     10,        8,      1,  no, yes,   5,  8) \
+    SC( 22,     10,        8,      2,  no, yes,   3,  8) \
+    SC( 23,     10,        8,      3,  no, yes,   7,  8) \
+    SC( 24,     10,        8,      4,  no, yes,   1,  8) \
+                                                         \
+    SC( 25,     11,        9,      1,  no, yes,   5,  9) \
+    SC( 26,     11,        9,      2,  no, yes,   3,  9) \
+    SC( 27,     11,        9,      3,  no, yes,   7,  9) \
+    SC( 28,     11,        9,      4, yes, yes,   1,  9) \
+                                                         \
+    SC( 29,     12,       10,      1,  no, yes,   5, no) \
+    SC( 30,     12,       10,      2,  no, yes,   3, no) \
+    SC( 31,     12,       10,      3,  no, yes,   7, no) \
+    SC( 32,     12,       10,      4, yes, yes,   2, no) \
+                                                         \
+    SC( 33,     13,       11,      1,  no, yes,   5, no) \
+    SC( 34,     13,       11,      2, yes, yes,   3, no) \
+    SC( 35,     13,       11,      3,  no, yes,   7, no) \
+    SC( 36,     13,       11,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 37,     14,       12,      1, yes,  no,   0, no) \
+    SC( 38,     14,       12,      2, yes,  no,   0, no) \
+    SC( 39,     14,       12,      3, yes,  no,   0, no) \
+    SC( 40,     14,       12,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 41,     15,       13,      1, yes,  no,   0, no) \
+    SC( 42,     15,       13,      2, yes,  no,   0, no) \
+    SC( 43,     15,       13,      3, yes,  no,   0, no) \
+    SC( 44,     15,       13,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 45,     16,       14,      1, yes,  no,   0, no) \
+    SC( 46,     16,       14,      2, yes,  no,   0, no) \
+    SC( 47,     16,       14,      3, yes,  no,   0, no) \
+    SC( 48,     16,       14,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 49,     17,       15,      1, yes,  no,   0, no) \
+    SC( 50,     17,       15,      2, yes,  no,   0, no) \
+    SC( 51,     17,       15,      3, yes,  no,   0, no) \
+    SC( 52,     17,       15,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 53,     18,       16,      1, yes,  no,   0, no) \
+    SC( 54,     18,       16,      2, yes,  no,   0, no) \
+    SC( 55,     18,       16,      3, yes,  no,   0, no) \
+    SC( 56,     18,       16,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 57,     19,       17,      1, yes,  no,   0, no) \
+    SC( 58,     19,       17,      2, yes,  no,   0, no) \
+    SC( 59,     19,       17,      3, yes,  no,   0, no) \
+    SC( 60,     19,       17,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 61,     20,       18,      1, yes,  no,   0, no) \
+    SC( 62,     20,       18,      2, yes,  no,   0, no) \
+    SC( 63,     20,       18,      3, yes,  no,   0, no) \
+    SC( 64,     20,       18,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 65,     21,       19,      1, yes,  no,   0, no) \
+    SC( 66,     21,       19,      2, yes,  no,   0, no) \
+    SC( 67,     21,       19,      3, yes,  no,   0, no) \
+    SC( 68,     21,       19,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 69,     22,       20,      1, yes,  no,   0, no) \
+    SC( 70,     22,       20,      2, yes,  no,   0, no) \
+    SC( 71,     22,       20,      3, yes,  no,   0, no) \
+    SC( 72,     22,       20,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 73,     23,       21,      1, yes,  no,   0, no) \
+    SC( 74,     23,       21,      2, yes,  no,   0, no) \
+    SC( 75,     23,       21,      3, yes,  no,   0, no) \
+    SC( 76,     23,       21,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 77,     24,       22,      1, yes,  no,   0, no) \
+    SC( 78,     24,       22,      2, yes,  no,   0, no) \
+    SC( 79,     24,       22,      3, yes,  no,   0, no) \
+    SC( 80,     24,       22,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 81,     25,       23,      1, yes,  no,   0, no) \
+    SC( 82,     25,       23,      2, yes,  no,   0, no) \
+    SC( 83,     25,       23,      3, yes,  no,   0, no) \
+    SC( 84,     25,       23,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 85,     26,       24,      1, yes,  no,   0, no) \
+    SC( 86,     26,       24,      2, yes,  no,   0, no) \
+    SC( 87,     26,       24,      3, yes,  no,   0, no) \
+    SC( 88,     26,       24,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 89,     27,       25,      1, yes,  no,   0, no) \
+    SC( 90,     27,       25,      2, yes,  no,   0, no) \
+    SC( 91,     27,       25,      3, yes,  no,   0, no) \
+    SC( 92,     27,       25,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 93,     28,       26,      1, yes,  no,   0, no) \
+    SC( 94,     28,       26,      2, yes,  no,   0, no) \
+    SC( 95,     28,       26,      3, yes,  no,   0, no) \
+    SC( 96,     28,       26,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 97,     29,       27,      1, yes,  no,   0, no) \
+    SC( 98,     29,       27,      2, yes,  no,   0, no) \
+    SC( 99,     29,       27,      3, yes,  no,   0, no) \
+    SC(100,     29,       27,      4, yes,  no,   0, no) \
+                                                         \
+    SC(101,     30,       28,      1, yes,  no,   0, no) \
+    SC(102,     30,       28,      2, yes,  no,   0, no) \
+    SC(103,     30,       28,      3, yes,  no,   0, no) \
+
+#define SIZE_CLASSES_DEFINED
+#define NTBINS			1
+#define NLBINS			29
+#define NBINS			36
+#define NSIZES			104
+#define LG_CEIL_NSIZES		7
+#define NPSIZES			71
+#define LG_TINY_MAXCLASS	3
+#define LOOKUP_MAXCLASS		((((size_t)1) << 11) + (((size_t)4) << 9))
+#define SMALL_MAXCLASS		((((size_t)1) << 13) + (((size_t)3) << 11))
+#define LG_LARGE_MINCLASS	14
+#define LARGE_MINCLASS		(ZU(1) << LG_LARGE_MINCLASS)
+#define LARGE_MAXCLASS		((((size_t)1) << 30) + (((size_t)3) << 28))
+#endif
+
+#if (LG_SIZEOF_PTR == 2 && LG_TINY_MIN == 4 && LG_QUANTUM == 4 && LG_PAGE == 12)
+#define SIZE_CLASSES \
+  /* index, lg_grp, lg_delta, ndelta, psz, bin, pgs, lg_delta_lookup */ \
+    SC(  0,      4,        4,      0,  no, yes,   1,  4) \
+    SC(  1,      4,        4,      1,  no, yes,   1,  4) \
+    SC(  2,      4,        4,      2,  no, yes,   3,  4) \
+    SC(  3,      4,        4,      3,  no, yes,   1,  4) \
+                                                         \
+    SC(  4,      6,        4,      1,  no, yes,   5,  4) \
+    SC(  5,      6,        4,      2,  no, yes,   3,  4) \
+    SC(  6,      6,        4,      3,  no, yes,   7,  4) \
+    SC(  7,      6,        4,      4,  no, yes,   1,  4) \
+                                                         \
+    SC(  8,      7,        5,      1,  no, yes,   5,  5) \
+    SC(  9,      7,        5,      2,  no, yes,   3,  5) \
+    SC( 10,      7,        5,      3,  no, yes,   7,  5) \
+    SC( 11,      7,        5,      4,  no, yes,   1,  5) \
+                                                         \
+    SC( 12,      8,        6,      1,  no, yes,   5,  6) \
+    SC( 13,      8,        6,      2,  no, yes,   3,  6) \
+    SC( 14,      8,        6,      3,  no, yes,   7,  6) \
+    SC( 15,      8,        6,      4,  no, yes,   1,  6) \
+                                                         \
+    SC( 16,      9,        7,      1,  no, yes,   5,  7) \
+    SC( 17,      9,        7,      2,  no, yes,   3,  7) \
+    SC( 18,      9,        7,      3,  no, yes,   7,  7) \
+    SC( 19,      9,        7,      4,  no, yes,   1,  7) \
+                                                         \
+    SC( 20,     10,        8,      1,  no, yes,   5,  8) \
+    SC( 21,     10,        8,      2,  no, yes,   3,  8) \
+    SC( 22,     10,        8,      3,  no, yes,   7,  8) \
+    SC( 23,     10,        8,      4,  no, yes,   1,  8) \
+                                                         \
+    SC( 24,     11,        9,      1,  no, yes,   5,  9) \
+    SC( 25,     11,        9,      2,  no, yes,   3,  9) \
+    SC( 26,     11,        9,      3,  no, yes,   7,  9) \
+    SC( 27,     11,        9,      4, yes, yes,   1,  9) \
+                                                         \
+    SC( 28,     12,       10,      1,  no, yes,   5, no) \
+    SC( 29,     12,       10,      2,  no, yes,   3, no) \
+    SC( 30,     12,       10,      3,  no, yes,   7, no) \
+    SC( 31,     12,       10,      4, yes, yes,   2, no) \
+                                                         \
+    SC( 32,     13,       11,      1,  no, yes,   5, no) \
+    SC( 33,     13,       11,      2, yes, yes,   3, no) \
+    SC( 34,     13,       11,      3,  no, yes,   7, no) \
+    SC( 35,     13,       11,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 36,     14,       12,      1, yes,  no,   0, no) \
+    SC( 37,     14,       12,      2, yes,  no,   0, no) \
+    SC( 38,     14,       12,      3, yes,  no,   0, no) \
+    SC( 39,     14,       12,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 40,     15,       13,      1, yes,  no,   0, no) \
+    SC( 41,     15,       13,      2, yes,  no,   0, no) \
+    SC( 42,     15,       13,      3, yes,  no,   0, no) \
+    SC( 43,     15,       13,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 44,     16,       14,      1, yes,  no,   0, no) \
+    SC( 45,     16,       14,      2, yes,  no,   0, no) \
+    SC( 46,     16,       14,      3, yes,  no,   0, no) \
+    SC( 47,     16,       14,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 48,     17,       15,      1, yes,  no,   0, no) \
+    SC( 49,     17,       15,      2, yes,  no,   0, no) \
+    SC( 50,     17,       15,      3, yes,  no,   0, no) \
+    SC( 51,     17,       15,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 52,     18,       16,      1, yes,  no,   0, no) \
+    SC( 53,     18,       16,      2, yes,  no,   0, no) \
+    SC( 54,     18,       16,      3, yes,  no,   0, no) \
+    SC( 55,     18,       16,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 56,     19,       17,      1, yes,  no,   0, no) \
+    SC( 57,     19,       17,      2, yes,  no,   0, no) \
+    SC( 58,     19,       17,      3, yes,  no,   0, no) \
+    SC( 59,     19,       17,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 60,     20,       18,      1, yes,  no,   0, no) \
+    SC( 61,     20,       18,      2, yes,  no,   0, no) \
+    SC( 62,     20,       18,      3, yes,  no,   0, no) \
+    SC( 63,     20,       18,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 64,     21,       19,      1, yes,  no,   0, no) \
+    SC( 65,     21,       19,      2, yes,  no,   0, no) \
+    SC( 66,     21,       19,      3, yes,  no,   0, no) \
+    SC( 67,     21,       19,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 68,     22,       20,      1, yes,  no,   0, no) \
+    SC( 69,     22,       20,      2, yes,  no,   0, no) \
+    SC( 70,     22,       20,      3, yes,  no,   0, no) \
+    SC( 71,     22,       20,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 72,     23,       21,      1, yes,  no,   0, no) \
+    SC( 73,     23,       21,      2, yes,  no,   0, no) \
+    SC( 74,     23,       21,      3, yes,  no,   0, no) \
+    SC( 75,     23,       21,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 76,     24,       22,      1, yes,  no,   0, no) \
+    SC( 77,     24,       22,      2, yes,  no,   0, no) \
+    SC( 78,     24,       22,      3, yes,  no,   0, no) \
+    SC( 79,     24,       22,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 80,     25,       23,      1, yes,  no,   0, no) \
+    SC( 81,     25,       23,      2, yes,  no,   0, no) \
+    SC( 82,     25,       23,      3, yes,  no,   0, no) \
+    SC( 83,     25,       23,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 84,     26,       24,      1, yes,  no,   0, no) \
+    SC( 85,     26,       24,      2, yes,  no,   0, no) \
+    SC( 86,     26,       24,      3, yes,  no,   0, no) \
+    SC( 87,     26,       24,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 88,     27,       25,      1, yes,  no,   0, no) \
+    SC( 89,     27,       25,      2, yes,  no,   0, no) \
+    SC( 90,     27,       25,      3, yes,  no,   0, no) \
+    SC( 91,     27,       25,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 92,     28,       26,      1, yes,  no,   0, no) \
+    SC( 93,     28,       26,      2, yes,  no,   0, no) \
+    SC( 94,     28,       26,      3, yes,  no,   0, no) \
+    SC( 95,     28,       26,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 96,     29,       27,      1, yes,  no,   0, no) \
+    SC( 97,     29,       27,      2, yes,  no,   0, no) \
+    SC( 98,     29,       27,      3, yes,  no,   0, no) \
+    SC( 99,     29,       27,      4, yes,  no,   0, no) \
+                                                         \
+    SC(100,     30,       28,      1, yes,  no,   0, no) \
+    SC(101,     30,       28,      2, yes,  no,   0, no) \
+    SC(102,     30,       28,      3, yes,  no,   0, no) \
+
+#define SIZE_CLASSES_DEFINED
+#define NTBINS			0
+#define NLBINS			28
+#define NBINS			35
+#define NSIZES			103
+#define LG_CEIL_NSIZES		7
+#define NPSIZES			71
+#define LG_TINY_MAXCLASS	"NA"
+#define LOOKUP_MAXCLASS		((((size_t)1) << 11) + (((size_t)4) << 9))
+#define SMALL_MAXCLASS		((((size_t)1) << 13) + (((size_t)3) << 11))
+#define LG_LARGE_MINCLASS	14
+#define LARGE_MINCLASS		(ZU(1) << LG_LARGE_MINCLASS)
+#define LARGE_MAXCLASS		((((size_t)1) << 30) + (((size_t)3) << 28))
+#endif
+
+#if (LG_SIZEOF_PTR == 3 && LG_TINY_MIN == 3 && LG_QUANTUM == 3 && LG_PAGE == 12)
+#define SIZE_CLASSES \
+  /* index, lg_grp, lg_delta, ndelta, psz, bin, pgs, lg_delta_lookup */ \
+    SC(  0,      3,        3,      0,  no, yes,   1,  3) \
+    SC(  1,      3,        3,      1,  no, yes,   1,  3) \
+    SC(  2,      3,        3,      2,  no, yes,   3,  3) \
+    SC(  3,      3,        3,      3,  no, yes,   1,  3) \
+                                                         \
+    SC(  4,      5,        3,      1,  no, yes,   5,  3) \
+    SC(  5,      5,        3,      2,  no, yes,   3,  3) \
+    SC(  6,      5,        3,      3,  no, yes,   7,  3) \
+    SC(  7,      5,        3,      4,  no, yes,   1,  3) \
+                                                         \
+    SC(  8,      6,        4,      1,  no, yes,   5,  4) \
+    SC(  9,      6,        4,      2,  no, yes,   3,  4) \
+    SC( 10,      6,        4,      3,  no, yes,   7,  4) \
+    SC( 11,      6,        4,      4,  no, yes,   1,  4) \
+                                                         \
+    SC( 12,      7,        5,      1,  no, yes,   5,  5) \
+    SC( 13,      7,        5,      2,  no, yes,   3,  5) \
+    SC( 14,      7,        5,      3,  no, yes,   7,  5) \
+    SC( 15,      7,        5,      4,  no, yes,   1,  5) \
+                                                         \
+    SC( 16,      8,        6,      1,  no, yes,   5,  6) \
+    SC( 17,      8,        6,      2,  no, yes,   3,  6) \
+    SC( 18,      8,        6,      3,  no, yes,   7,  6) \
+    SC( 19,      8,        6,      4,  no, yes,   1,  6) \
+                                                         \
+    SC( 20,      9,        7,      1,  no, yes,   5,  7) \
+    SC( 21,      9,        7,      2,  no, yes,   3,  7) \
+    SC( 22,      9,        7,      3,  no, yes,   7,  7) \
+    SC( 23,      9,        7,      4,  no, yes,   1,  7) \
+                                                         \
+    SC( 24,     10,        8,      1,  no, yes,   5,  8) \
+    SC( 25,     10,        8,      2,  no, yes,   3,  8) \
+    SC( 26,     10,        8,      3,  no, yes,   7,  8) \
+    SC( 27,     10,        8,      4,  no, yes,   1,  8) \
+                                                         \
+    SC( 28,     11,        9,      1,  no, yes,   5,  9) \
+    SC( 29,     11,        9,      2,  no, yes,   3,  9) \
+    SC( 30,     11,        9,      3,  no, yes,   7,  9) \
+    SC( 31,     11,        9,      4, yes, yes,   1,  9) \
+                                                         \
+    SC( 32,     12,       10,      1,  no, yes,   5, no) \
+    SC( 33,     12,       10,      2,  no, yes,   3, no) \
+    SC( 34,     12,       10,      3,  no, yes,   7, no) \
+    SC( 35,     12,       10,      4, yes, yes,   2, no) \
+                                                         \
+    SC( 36,     13,       11,      1,  no, yes,   5, no) \
+    SC( 37,     13,       11,      2, yes, yes,   3, no) \
+    SC( 38,     13,       11,      3,  no, yes,   7, no) \
+    SC( 39,     13,       11,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 40,     14,       12,      1, yes,  no,   0, no) \
+    SC( 41,     14,       12,      2, yes,  no,   0, no) \
+    SC( 42,     14,       12,      3, yes,  no,   0, no) \
+    SC( 43,     14,       12,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 44,     15,       13,      1, yes,  no,   0, no) \
+    SC( 45,     15,       13,      2, yes,  no,   0, no) \
+    SC( 46,     15,       13,      3, yes,  no,   0, no) \
+    SC( 47,     15,       13,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 48,     16,       14,      1, yes,  no,   0, no) \
+    SC( 49,     16,       14,      2, yes,  no,   0, no) \
+    SC( 50,     16,       14,      3, yes,  no,   0, no) \
+    SC( 51,     16,       14,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 52,     17,       15,      1, yes,  no,   0, no) \
+    SC( 53,     17,       15,      2, yes,  no,   0, no) \
+    SC( 54,     17,       15,      3, yes,  no,   0, no) \
+    SC( 55,     17,       15,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 56,     18,       16,      1, yes,  no,   0, no) \
+    SC( 57,     18,       16,      2, yes,  no,   0, no) \
+    SC( 58,     18,       16,      3, yes,  no,   0, no) \
+    SC( 59,     18,       16,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 60,     19,       17,      1, yes,  no,   0, no) \
+    SC( 61,     19,       17,      2, yes,  no,   0, no) \
+    SC( 62,     19,       17,      3, yes,  no,   0, no) \
+    SC( 63,     19,       17,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 64,     20,       18,      1, yes,  no,   0, no) \
+    SC( 65,     20,       18,      2, yes,  no,   0, no) \
+    SC( 66,     20,       18,      3, yes,  no,   0, no) \
+    SC( 67,     20,       18,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 68,     21,       19,      1, yes,  no,   0, no) \
+    SC( 69,     21,       19,      2, yes,  no,   0, no) \
+    SC( 70,     21,       19,      3, yes,  no,   0, no) \
+    SC( 71,     21,       19,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 72,     22,       20,      1, yes,  no,   0, no) \
+    SC( 73,     22,       20,      2, yes,  no,   0, no) \
+    SC( 74,     22,       20,      3, yes,  no,   0, no) \
+    SC( 75,     22,       20,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 76,     23,       21,      1, yes,  no,   0, no) \
+    SC( 77,     23,       21,      2, yes,  no,   0, no) \
+    SC( 78,     23,       21,      3, yes,  no,   0, no) \
+    SC( 79,     23,       21,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 80,     24,       22,      1, yes,  no,   0, no) \
+    SC( 81,     24,       22,      2, yes,  no,   0, no) \
+    SC( 82,     24,       22,      3, yes,  no,   0, no) \
+    SC( 83,     24,       22,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 84,     25,       23,      1, yes,  no,   0, no) \
+    SC( 85,     25,       23,      2, yes,  no,   0, no) \
+    SC( 86,     25,       23,      3, yes,  no,   0, no) \
+    SC( 87,     25,       23,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 88,     26,       24,      1, yes,  no,   0, no) \
+    SC( 89,     26,       24,      2, yes,  no,   0, no) \
+    SC( 90,     26,       24,      3, yes,  no,   0, no) \
+    SC( 91,     26,       24,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 92,     27,       25,      1, yes,  no,   0, no) \
+    SC( 93,     27,       25,      2, yes,  no,   0, no) \
+    SC( 94,     27,       25,      3, yes,  no,   0, no) \
+    SC( 95,     27,       25,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 96,     28,       26,      1, yes,  no,   0, no) \
+    SC( 97,     28,       26,      2, yes,  no,   0, no) \
+    SC( 98,     28,       26,      3, yes,  no,   0, no) \
+    SC( 99,     28,       26,      4, yes,  no,   0, no) \
+                                                         \
+    SC(100,     29,       27,      1, yes,  no,   0, no) \
+    SC(101,     29,       27,      2, yes,  no,   0, no) \
+    SC(102,     29,       27,      3, yes,  no,   0, no) \
+    SC(103,     29,       27,      4, yes,  no,   0, no) \
+                                                         \
+    SC(104,     30,       28,      1, yes,  no,   0, no) \
+    SC(105,     30,       28,      2, yes,  no,   0, no) \
+    SC(106,     30,       28,      3, yes,  no,   0, no) \
+    SC(107,     30,       28,      4, yes,  no,   0, no) \
+                                                         \
+    SC(108,     31,       29,      1, yes,  no,   0, no) \
+    SC(109,     31,       29,      2, yes,  no,   0, no) \
+    SC(110,     31,       29,      3, yes,  no,   0, no) \
+    SC(111,     31,       29,      4, yes,  no,   0, no) \
+                                                         \
+    SC(112,     32,       30,      1, yes,  no,   0, no) \
+    SC(113,     32,       30,      2, yes,  no,   0, no) \
+    SC(114,     32,       30,      3, yes,  no,   0, no) \
+    SC(115,     32,       30,      4, yes,  no,   0, no) \
+                                                         \
+    SC(116,     33,       31,      1, yes,  no,   0, no) \
+    SC(117,     33,       31,      2, yes,  no,   0, no) \
+    SC(118,     33,       31,      3, yes,  no,   0, no) \
+    SC(119,     33,       31,      4, yes,  no,   0, no) \
+                                                         \
+    SC(120,     34,       32,      1, yes,  no,   0, no) \
+    SC(121,     34,       32,      2, yes,  no,   0, no) \
+    SC(122,     34,       32,      3, yes,  no,   0, no) \
+    SC(123,     34,       32,      4, yes,  no,   0, no) \
+                                                         \
+    SC(124,     35,       33,      1, yes,  no,   0, no) \
+    SC(125,     35,       33,      2, yes,  no,   0, no) \
+    SC(126,     35,       33,      3, yes,  no,   0, no) \
+    SC(127,     35,       33,      4, yes,  no,   0, no) \
+                                                         \
+    SC(128,     36,       34,      1, yes,  no,   0, no) \
+    SC(129,     36,       34,      2, yes,  no,   0, no) \
+    SC(130,     36,       34,      3, yes,  no,   0, no) \
+    SC(131,     36,       34,      4, yes,  no,   0, no) \
+                                                         \
+    SC(132,     37,       35,      1, yes,  no,   0, no) \
+    SC(133,     37,       35,      2, yes,  no,   0, no) \
+    SC(134,     37,       35,      3, yes,  no,   0, no) \
+    SC(135,     37,       35,      4, yes,  no,   0, no) \
+                                                         \
+    SC(136,     38,       36,      1, yes,  no,   0, no) \
+    SC(137,     38,       36,      2, yes,  no,   0, no) \
+    SC(138,     38,       36,      3, yes,  no,   0, no) \
+    SC(139,     38,       36,      4, yes,  no,   0, no) \
+                                                         \
+    SC(140,     39,       37,      1, yes,  no,   0, no) \
+    SC(141,     39,       37,      2, yes,  no,   0, no) \
+    SC(142,     39,       37,      3, yes,  no,   0, no) \
+    SC(143,     39,       37,      4, yes,  no,   0, no) \
+                                                         \
+    SC(144,     40,       38,      1, yes,  no,   0, no) \
+    SC(145,     40,       38,      2, yes,  no,   0, no) \
+    SC(146,     40,       38,      3, yes,  no,   0, no) \
+    SC(147,     40,       38,      4, yes,  no,   0, no) \
+                                                         \
+    SC(148,     41,       39,      1, yes,  no,   0, no) \
+    SC(149,     41,       39,      2, yes,  no,   0, no) \
+    SC(150,     41,       39,      3, yes,  no,   0, no) \
+    SC(151,     41,       39,      4, yes,  no,   0, no) \
+                                                         \
+    SC(152,     42,       40,      1, yes,  no,   0, no) \
+    SC(153,     42,       40,      2, yes,  no,   0, no) \
+    SC(154,     42,       40,      3, yes,  no,   0, no) \
+    SC(155,     42,       40,      4, yes,  no,   0, no) \
+                                                         \
+    SC(156,     43,       41,      1, yes,  no,   0, no) \
+    SC(157,     43,       41,      2, yes,  no,   0, no) \
+    SC(158,     43,       41,      3, yes,  no,   0, no) \
+    SC(159,     43,       41,      4, yes,  no,   0, no) \
+                                                         \
+    SC(160,     44,       42,      1, yes,  no,   0, no) \
+    SC(161,     44,       42,      2, yes,  no,   0, no) \
+    SC(162,     44,       42,      3, yes,  no,   0, no) \
+    SC(163,     44,       42,      4, yes,  no,   0, no) \
+                                                         \
+    SC(164,     45,       43,      1, yes,  no,   0, no) \
+    SC(165,     45,       43,      2, yes,  no,   0, no) \
+    SC(166,     45,       43,      3, yes,  no,   0, no) \
+    SC(167,     45,       43,      4, yes,  no,   0, no) \
+                                                         \
+    SC(168,     46,       44,      1, yes,  no,   0, no) \
+    SC(169,     46,       44,      2, yes,  no,   0, no) \
+    SC(170,     46,       44,      3, yes,  no,   0, no) \
+    SC(171,     46,       44,      4, yes,  no,   0, no) \
+                                                         \
+    SC(172,     47,       45,      1, yes,  no,   0, no) \
+    SC(173,     47,       45,      2, yes,  no,   0, no) \
+    SC(174,     47,       45,      3, yes,  no,   0, no) \
+    SC(175,     47,       45,      4, yes,  no,   0, no) \
+                                                         \
+    SC(176,     48,       46,      1, yes,  no,   0, no) \
+    SC(177,     48,       46,      2, yes,  no,   0, no) \
+    SC(178,     48,       46,      3, yes,  no,   0, no) \
+    SC(179,     48,       46,      4, yes,  no,   0, no) \
+                                                         \
+    SC(180,     49,       47,      1, yes,  no,   0, no) \
+    SC(181,     49,       47,      2, yes,  no,   0, no) \
+    SC(182,     49,       47,      3, yes,  no,   0, no) \
+    SC(183,     49,       47,      4, yes,  no,   0, no) \
+                                                         \
+    SC(184,     50,       48,      1, yes,  no,   0, no) \
+    SC(185,     50,       48,      2, yes,  no,   0, no) \
+    SC(186,     50,       48,      3, yes,  no,   0, no) \
+    SC(187,     50,       48,      4, yes,  no,   0, no) \
+                                                         \
+    SC(188,     51,       49,      1, yes,  no,   0, no) \
+    SC(189,     51,       49,      2, yes,  no,   0, no) \
+    SC(190,     51,       49,      3, yes,  no,   0, no) \
+    SC(191,     51,       49,      4, yes,  no,   0, no) \
+                                                         \
+    SC(192,     52,       50,      1, yes,  no,   0, no) \
+    SC(193,     52,       50,      2, yes,  no,   0, no) \
+    SC(194,     52,       50,      3, yes,  no,   0, no) \
+    SC(195,     52,       50,      4, yes,  no,   0, no) \
+                                                         \
+    SC(196,     53,       51,      1, yes,  no,   0, no) \
+    SC(197,     53,       51,      2, yes,  no,   0, no) \
+    SC(198,     53,       51,      3, yes,  no,   0, no) \
+    SC(199,     53,       51,      4, yes,  no,   0, no) \
+                                                         \
+    SC(200,     54,       52,      1, yes,  no,   0, no) \
+    SC(201,     54,       52,      2, yes,  no,   0, no) \
+    SC(202,     54,       52,      3, yes,  no,   0, no) \
+    SC(203,     54,       52,      4, yes,  no,   0, no) \
+                                                         \
+    SC(204,     55,       53,      1, yes,  no,   0, no) \
+    SC(205,     55,       53,      2, yes,  no,   0, no) \
+    SC(206,     55,       53,      3, yes,  no,   0, no) \
+    SC(207,     55,       53,      4, yes,  no,   0, no) \
+                                                         \
+    SC(208,     56,       54,      1, yes,  no,   0, no) \
+    SC(209,     56,       54,      2, yes,  no,   0, no) \
+    SC(210,     56,       54,      3, yes,  no,   0, no) \
+    SC(211,     56,       54,      4, yes,  no,   0, no) \
+                                                         \
+    SC(212,     57,       55,      1, yes,  no,   0, no) \
+    SC(213,     57,       55,      2, yes,  no,   0, no) \
+    SC(214,     57,       55,      3, yes,  no,   0, no) \
+    SC(215,     57,       55,      4, yes,  no,   0, no) \
+                                                         \
+    SC(216,     58,       56,      1, yes,  no,   0, no) \
+    SC(217,     58,       56,      2, yes,  no,   0, no) \
+    SC(218,     58,       56,      3, yes,  no,   0, no) \
+    SC(219,     58,       56,      4, yes,  no,   0, no) \
+                                                         \
+    SC(220,     59,       57,      1, yes,  no,   0, no) \
+    SC(221,     59,       57,      2, yes,  no,   0, no) \
+    SC(222,     59,       57,      3, yes,  no,   0, no) \
+    SC(223,     59,       57,      4, yes,  no,   0, no) \
+                                                         \
+    SC(224,     60,       58,      1, yes,  no,   0, no) \
+    SC(225,     60,       58,      2, yes,  no,   0, no) \
+    SC(226,     60,       58,      3, yes,  no,   0, no) \
+    SC(227,     60,       58,      4, yes,  no,   0, no) \
+                                                         \
+    SC(228,     61,       59,      1, yes,  no,   0, no) \
+    SC(229,     61,       59,      2, yes,  no,   0, no) \
+    SC(230,     61,       59,      3, yes,  no,   0, no) \
+    SC(231,     61,       59,      4, yes,  no,   0, no) \
+                                                         \
+    SC(232,     62,       60,      1, yes,  no,   0, no) \
+    SC(233,     62,       60,      2, yes,  no,   0, no) \
+    SC(234,     62,       60,      3, yes,  no,   0, no) \
+
+#define SIZE_CLASSES_DEFINED
+#define NTBINS			0
+#define NLBINS			32
+#define NBINS			39
+#define NSIZES			235
+#define LG_CEIL_NSIZES		8
+#define NPSIZES			199
+#define LG_TINY_MAXCLASS	"NA"
+#define LOOKUP_MAXCLASS		((((size_t)1) << 11) + (((size_t)4) << 9))
+#define SMALL_MAXCLASS		((((size_t)1) << 13) + (((size_t)3) << 11))
+#define LG_LARGE_MINCLASS	14
+#define LARGE_MINCLASS		(ZU(1) << LG_LARGE_MINCLASS)
+#define LARGE_MAXCLASS		((((size_t)1) << 62) + (((size_t)3) << 60))
+#endif
+
+#if (LG_SIZEOF_PTR == 3 && LG_TINY_MIN == 3 && LG_QUANTUM == 4 && LG_PAGE == 12)
+#define SIZE_CLASSES \
+  /* index, lg_grp, lg_delta, ndelta, psz, bin, pgs, lg_delta_lookup */ \
+    SC(  0,      3,        3,      0,  no, yes,   1,  3) \
+                                                         \
+    SC(  1,      3,        3,      1,  no, yes,   1,  3) \
+    SC(  2,      4,        4,      1,  no, yes,   1,  4) \
+    SC(  3,      4,        4,      2,  no, yes,   3,  4) \
+    SC(  4,      4,        4,      3,  no, yes,   1,  4) \
+                                                         \
+    SC(  5,      6,        4,      1,  no, yes,   5,  4) \
+    SC(  6,      6,        4,      2,  no, yes,   3,  4) \
+    SC(  7,      6,        4,      3,  no, yes,   7,  4) \
+    SC(  8,      6,        4,      4,  no, yes,   1,  4) \
+                                                         \
+    SC(  9,      7,        5,      1,  no, yes,   5,  5) \
+    SC( 10,      7,        5,      2,  no, yes,   3,  5) \
+    SC( 11,      7,        5,      3,  no, yes,   7,  5) \
+    SC( 12,      7,        5,      4,  no, yes,   1,  5) \
+                                                         \
+    SC( 13,      8,        6,      1,  no, yes,   5,  6) \
+    SC( 14,      8,        6,      2,  no, yes,   3,  6) \
+    SC( 15,      8,        6,      3,  no, yes,   7,  6) \
+    SC( 16,      8,        6,      4,  no, yes,   1,  6) \
+                                                         \
+    SC( 17,      9,        7,      1,  no, yes,   5,  7) \
+    SC( 18,      9,        7,      2,  no, yes,   3,  7) \
+    SC( 19,      9,        7,      3,  no, yes,   7,  7) \
+    SC( 20,      9,        7,      4,  no, yes,   1,  7) \
+                                                         \
+    SC( 21,     10,        8,      1,  no, yes,   5,  8) \
+    SC( 22,     10,        8,      2,  no, yes,   3,  8) \
+    SC( 23,     10,        8,      3,  no, yes,   7,  8) \
+    SC( 24,     10,        8,      4,  no, yes,   1,  8) \
+                                                         \
+    SC( 25,     11,        9,      1,  no, yes,   5,  9) \
+    SC( 26,     11,        9,      2,  no, yes,   3,  9) \
+    SC( 27,     11,        9,      3,  no, yes,   7,  9) \
+    SC( 28,     11,        9,      4, yes, yes,   1,  9) \
+                                                         \
+    SC( 29,     12,       10,      1,  no, yes,   5, no) \
+    SC( 30,     12,       10,      2,  no, yes,   3, no) \
+    SC( 31,     12,       10,      3,  no, yes,   7, no) \
+    SC( 32,     12,       10,      4, yes, yes,   2, no) \
+                                                         \
+    SC( 33,     13,       11,      1,  no, yes,   5, no) \
+    SC( 34,     13,       11,      2, yes, yes,   3, no) \
+    SC( 35,     13,       11,      3,  no, yes,   7, no) \
+    SC( 36,     13,       11,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 37,     14,       12,      1, yes,  no,   0, no) \
+    SC( 38,     14,       12,      2, yes,  no,   0, no) \
+    SC( 39,     14,       12,      3, yes,  no,   0, no) \
+    SC( 40,     14,       12,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 41,     15,       13,      1, yes,  no,   0, no) \
+    SC( 42,     15,       13,      2, yes,  no,   0, no) \
+    SC( 43,     15,       13,      3, yes,  no,   0, no) \
+    SC( 44,     15,       13,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 45,     16,       14,      1, yes,  no,   0, no) \
+    SC( 46,     16,       14,      2, yes,  no,   0, no) \
+    SC( 47,     16,       14,      3, yes,  no,   0, no) \
+    SC( 48,     16,       14,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 49,     17,       15,      1, yes,  no,   0, no) \
+    SC( 50,     17,       15,      2, yes,  no,   0, no) \
+    SC( 51,     17,       15,      3, yes,  no,   0, no) \
+    SC( 52,     17,       15,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 53,     18,       16,      1, yes,  no,   0, no) \
+    SC( 54,     18,       16,      2, yes,  no,   0, no) \
+    SC( 55,     18,       16,      3, yes,  no,   0, no) \
+    SC( 56,     18,       16,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 57,     19,       17,      1, yes,  no,   0, no) \
+    SC( 58,     19,       17,      2, yes,  no,   0, no) \
+    SC( 59,     19,       17,      3, yes,  no,   0, no) \
+    SC( 60,     19,       17,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 61,     20,       18,      1, yes,  no,   0, no) \
+    SC( 62,     20,       18,      2, yes,  no,   0, no) \
+    SC( 63,     20,       18,      3, yes,  no,   0, no) \
+    SC( 64,     20,       18,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 65,     21,       19,      1, yes,  no,   0, no) \
+    SC( 66,     21,       19,      2, yes,  no,   0, no) \
+    SC( 67,     21,       19,      3, yes,  no,   0, no) \
+    SC( 68,     21,       19,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 69,     22,       20,      1, yes,  no,   0, no) \
+    SC( 70,     22,       20,      2, yes,  no,   0, no) \
+    SC( 71,     22,       20,      3, yes,  no,   0, no) \
+    SC( 72,     22,       20,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 73,     23,       21,      1, yes,  no,   0, no) \
+    SC( 74,     23,       21,      2, yes,  no,   0, no) \
+    SC( 75,     23,       21,      3, yes,  no,   0, no) \
+    SC( 76,     23,       21,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 77,     24,       22,      1, yes,  no,   0, no) \
+    SC( 78,     24,       22,      2, yes,  no,   0, no) \
+    SC( 79,     24,       22,      3, yes,  no,   0, no) \
+    SC( 80,     24,       22,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 81,     25,       23,      1, yes,  no,   0, no) \
+    SC( 82,     25,       23,      2, yes,  no,   0, no) \
+    SC( 83,     25,       23,      3, yes,  no,   0, no) \
+    SC( 84,     25,       23,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 85,     26,       24,      1, yes,  no,   0, no) \
+    SC( 86,     26,       24,      2, yes,  no,   0, no) \
+    SC( 87,     26,       24,      3, yes,  no,   0, no) \
+    SC( 88,     26,       24,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 89,     27,       25,      1, yes,  no,   0, no) \
+    SC( 90,     27,       25,      2, yes,  no,   0, no) \
+    SC( 91,     27,       25,      3, yes,  no,   0, no) \
+    SC( 92,     27,       25,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 93,     28,       26,      1, yes,  no,   0, no) \
+    SC( 94,     28,       26,      2, yes,  no,   0, no) \
+    SC( 95,     28,       26,      3, yes,  no,   0, no) \
+    SC( 96,     28,       26,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 97,     29,       27,      1, yes,  no,   0, no) \
+    SC( 98,     29,       27,      2, yes,  no,   0, no) \
+    SC( 99,     29,       27,      3, yes,  no,   0, no) \
+    SC(100,     29,       27,      4, yes,  no,   0, no) \
+                                                         \
+    SC(101,     30,       28,      1, yes,  no,   0, no) \
+    SC(102,     30,       28,      2, yes,  no,   0, no) \
+    SC(103,     30,       28,      3, yes,  no,   0, no) \
+    SC(104,     30,       28,      4, yes,  no,   0, no) \
+                                                         \
+    SC(105,     31,       29,      1, yes,  no,   0, no) \
+    SC(106,     31,       29,      2, yes,  no,   0, no) \
+    SC(107,     31,       29,      3, yes,  no,   0, no) \
+    SC(108,     31,       29,      4, yes,  no,   0, no) \
+                                                         \
+    SC(109,     32,       30,      1, yes,  no,   0, no) \
+    SC(110,     32,       30,      2, yes,  no,   0, no) \
+    SC(111,     32,       30,      3, yes,  no,   0, no) \
+    SC(112,     32,       30,      4, yes,  no,   0, no) \
+                                                         \
+    SC(113,     33,       31,      1, yes,  no,   0, no) \
+    SC(114,     33,       31,      2, yes,  no,   0, no) \
+    SC(115,     33,       31,      3, yes,  no,   0, no) \
+    SC(116,     33,       31,      4, yes,  no,   0, no) \
+                                                         \
+    SC(117,     34,       32,      1, yes,  no,   0, no) \
+    SC(118,     34,       32,      2, yes,  no,   0, no) \
+    SC(119,     34,       32,      3, yes,  no,   0, no) \
+    SC(120,     34,       32,      4, yes,  no,   0, no) \
+                                                         \
+    SC(121,     35,       33,      1, yes,  no,   0, no) \
+    SC(122,     35,       33,      2, yes,  no,   0, no) \
+    SC(123,     35,       33,      3, yes,  no,   0, no) \
+    SC(124,     35,       33,      4, yes,  no,   0, no) \
+                                                         \
+    SC(125,     36,       34,      1, yes,  no,   0, no) \
+    SC(126,     36,       34,      2, yes,  no,   0, no) \
+    SC(127,     36,       34,      3, yes,  no,   0, no) \
+    SC(128,     36,       34,      4, yes,  no,   0, no) \
+                                                         \
+    SC(129,     37,       35,      1, yes,  no,   0, no) \
+    SC(130,     37,       35,      2, yes,  no,   0, no) \
+    SC(131,     37,       35,      3, yes,  no,   0, no) \
+    SC(132,     37,       35,      4, yes,  no,   0, no) \
+                                                         \
+    SC(133,     38,       36,      1, yes,  no,   0, no) \
+    SC(134,     38,       36,      2, yes,  no,   0, no) \
+    SC(135,     38,       36,      3, yes,  no,   0, no) \
+    SC(136,     38,       36,      4, yes,  no,   0, no) \
+                                                         \
+    SC(137,     39,       37,      1, yes,  no,   0, no) \
+    SC(138,     39,       37,      2, yes,  no,   0, no) \
+    SC(139,     39,       37,      3, yes,  no,   0, no) \
+    SC(140,     39,       37,      4, yes,  no,   0, no) \
+                                                         \
+    SC(141,     40,       38,      1, yes,  no,   0, no) \
+    SC(142,     40,       38,      2, yes,  no,   0, no) \
+    SC(143,     40,       38,      3, yes,  no,   0, no) \
+    SC(144,     40,       38,      4, yes,  no,   0, no) \
+                                                         \
+    SC(145,     41,       39,      1, yes,  no,   0, no) \
+    SC(146,     41,       39,      2, yes,  no,   0, no) \
+    SC(147,     41,       39,      3, yes,  no,   0, no) \
+    SC(148,     41,       39,      4, yes,  no,   0, no) \
+                                                         \
+    SC(149,     42,       40,      1, yes,  no,   0, no) \
+    SC(150,     42,       40,      2, yes,  no,   0, no) \
+    SC(151,     42,       40,      3, yes,  no,   0, no) \
+    SC(152,     42,       40,      4, yes,  no,   0, no) \
+                                                         \
+    SC(153,     43,       41,      1, yes,  no,   0, no) \
+    SC(154,     43,       41,      2, yes,  no,   0, no) \
+    SC(155,     43,       41,      3, yes,  no,   0, no) \
+    SC(156,     43,       41,      4, yes,  no,   0, no) \
+                                                         \
+    SC(157,     44,       42,      1, yes,  no,   0, no) \
+    SC(158,     44,       42,      2, yes,  no,   0, no) \
+    SC(159,     44,       42,      3, yes,  no,   0, no) \
+    SC(160,     44,       42,      4, yes,  no,   0, no) \
+                                                         \
+    SC(161,     45,       43,      1, yes,  no,   0, no) \
+    SC(162,     45,       43,      2, yes,  no,   0, no) \
+    SC(163,     45,       43,      3, yes,  no,   0, no) \
+    SC(164,     45,       43,      4, yes,  no,   0, no) \
+                                                         \
+    SC(165,     46,       44,      1, yes,  no,   0, no) \
+    SC(166,     46,       44,      2, yes,  no,   0, no) \
+    SC(167,     46,       44,      3, yes,  no,   0, no) \
+    SC(168,     46,       44,      4, yes,  no,   0, no) \
+                                                         \
+    SC(169,     47,       45,      1, yes,  no,   0, no) \
+    SC(170,     47,       45,      2, yes,  no,   0, no) \
+    SC(171,     47,       45,      3, yes,  no,   0, no) \
+    SC(172,     47,       45,      4, yes,  no,   0, no) \
+                                                         \
+    SC(173,     48,       46,      1, yes,  no,   0, no) \
+    SC(174,     48,       46,      2, yes,  no,   0, no) \
+    SC(175,     48,       46,      3, yes,  no,   0, no) \
+    SC(176,     48,       46,      4, yes,  no,   0, no) \
+                                                         \
+    SC(177,     49,       47,      1, yes,  no,   0, no) \
+    SC(178,     49,       47,      2, yes,  no,   0, no) \
+    SC(179,     49,       47,      3, yes,  no,   0, no) \
+    SC(180,     49,       47,      4, yes,  no,   0, no) \
+                                                         \
+    SC(181,     50,       48,      1, yes,  no,   0, no) \
+    SC(182,     50,       48,      2, yes,  no,   0, no) \
+    SC(183,     50,       48,      3, yes,  no,   0, no) \
+    SC(184,     50,       48,      4, yes,  no,   0, no) \
+                                                         \
+    SC(185,     51,       49,      1, yes,  no,   0, no) \
+    SC(186,     51,       49,      2, yes,  no,   0, no) \
+    SC(187,     51,       49,      3, yes,  no,   0, no) \
+    SC(188,     51,       49,      4, yes,  no,   0, no) \
+                                                         \
+    SC(189,     52,       50,      1, yes,  no,   0, no) \
+    SC(190,     52,       50,      2, yes,  no,   0, no) \
+    SC(191,     52,       50,      3, yes,  no,   0, no) \
+    SC(192,     52,       50,      4, yes,  no,   0, no) \
+                                                         \
+    SC(193,     53,       51,      1, yes,  no,   0, no) \
+    SC(194,     53,       51,      2, yes,  no,   0, no) \
+    SC(195,     53,       51,      3, yes,  no,   0, no) \
+    SC(196,     53,       51,      4, yes,  no,   0, no) \
+                                                         \
+    SC(197,     54,       52,      1, yes,  no,   0, no) \
+    SC(198,     54,       52,      2, yes,  no,   0, no) \
+    SC(199,     54,       52,      3, yes,  no,   0, no) \
+    SC(200,     54,       52,      4, yes,  no,   0, no) \
+                                                         \
+    SC(201,     55,       53,      1, yes,  no,   0, no) \
+    SC(202,     55,       53,      2, yes,  no,   0, no) \
+    SC(203,     55,       53,      3, yes,  no,   0, no) \
+    SC(204,     55,       53,      4, yes,  no,   0, no) \
+                                                         \
+    SC(205,     56,       54,      1, yes,  no,   0, no) \
+    SC(206,     56,       54,      2, yes,  no,   0, no) \
+    SC(207,     56,       54,      3, yes,  no,   0, no) \
+    SC(208,     56,       54,      4, yes,  no,   0, no) \
+                                                         \
+    SC(209,     57,       55,      1, yes,  no,   0, no) \
+    SC(210,     57,       55,      2, yes,  no,   0, no) \
+    SC(211,     57,       55,      3, yes,  no,   0, no) \
+    SC(212,     57,       55,      4, yes,  no,   0, no) \
+                                                         \
+    SC(213,     58,       56,      1, yes,  no,   0, no) \
+    SC(214,     58,       56,      2, yes,  no,   0, no) \
+    SC(215,     58,       56,      3, yes,  no,   0, no) \
+    SC(216,     58,       56,      4, yes,  no,   0, no) \
+                                                         \
+    SC(217,     59,       57,      1, yes,  no,   0, no) \
+    SC(218,     59,       57,      2, yes,  no,   0, no) \
+    SC(219,     59,       57,      3, yes,  no,   0, no) \
+    SC(220,     59,       57,      4, yes,  no,   0, no) \
+                                                         \
+    SC(221,     60,       58,      1, yes,  no,   0, no) \
+    SC(222,     60,       58,      2, yes,  no,   0, no) \
+    SC(223,     60,       58,      3, yes,  no,   0, no) \
+    SC(224,     60,       58,      4, yes,  no,   0, no) \
+                                                         \
+    SC(225,     61,       59,      1, yes,  no,   0, no) \
+    SC(226,     61,       59,      2, yes,  no,   0, no) \
+    SC(227,     61,       59,      3, yes,  no,   0, no) \
+    SC(228,     61,       59,      4, yes,  no,   0, no) \
+                                                         \
+    SC(229,     62,       60,      1, yes,  no,   0, no) \
+    SC(230,     62,       60,      2, yes,  no,   0, no) \
+    SC(231,     62,       60,      3, yes,  no,   0, no) \
+
+#define SIZE_CLASSES_DEFINED
+#define NTBINS			1
+#define NLBINS			29
+#define NBINS			36
+#define NSIZES			232
+#define LG_CEIL_NSIZES		8
+#define NPSIZES			199
+#define LG_TINY_MAXCLASS	3
+#define LOOKUP_MAXCLASS		((((size_t)1) << 11) + (((size_t)4) << 9))
+#define SMALL_MAXCLASS		((((size_t)1) << 13) + (((size_t)3) << 11))
+#define LG_LARGE_MINCLASS	14
+#define LARGE_MINCLASS		(ZU(1) << LG_LARGE_MINCLASS)
+#define LARGE_MAXCLASS		((((size_t)1) << 62) + (((size_t)3) << 60))
+#endif
+
+#if (LG_SIZEOF_PTR == 3 && LG_TINY_MIN == 4 && LG_QUANTUM == 4 && LG_PAGE == 12)
+#define SIZE_CLASSES \
+  /* index, lg_grp, lg_delta, ndelta, psz, bin, pgs, lg_delta_lookup */ \
+    SC(  0,      4,        4,      0,  no, yes,   1,  4) \
+    SC(  1,      4,        4,      1,  no, yes,   1,  4) \
+    SC(  2,      4,        4,      2,  no, yes,   3,  4) \
+    SC(  3,      4,        4,      3,  no, yes,   1,  4) \
+                                                         \
+    SC(  4,      6,        4,      1,  no, yes,   5,  4) \
+    SC(  5,      6,        4,      2,  no, yes,   3,  4) \
+    SC(  6,      6,        4,      3,  no, yes,   7,  4) \
+    SC(  7,      6,        4,      4,  no, yes,   1,  4) \
+                                                         \
+    SC(  8,      7,        5,      1,  no, yes,   5,  5) \
+    SC(  9,      7,        5,      2,  no, yes,   3,  5) \
+    SC( 10,      7,        5,      3,  no, yes,   7,  5) \
+    SC( 11,      7,        5,      4,  no, yes,   1,  5) \
+                                                         \
+    SC( 12,      8,        6,      1,  no, yes,   5,  6) \
+    SC( 13,      8,        6,      2,  no, yes,   3,  6) \
+    SC( 14,      8,        6,      3,  no, yes,   7,  6) \
+    SC( 15,      8,        6,      4,  no, yes,   1,  6) \
+                                                         \
+    SC( 16,      9,        7,      1,  no, yes,   5,  7) \
+    SC( 17,      9,        7,      2,  no, yes,   3,  7) \
+    SC( 18,      9,        7,      3,  no, yes,   7,  7) \
+    SC( 19,      9,        7,      4,  no, yes,   1,  7) \
+                                                         \
+    SC( 20,     10,        8,      1,  no, yes,   5,  8) \
+    SC( 21,     10,        8,      2,  no, yes,   3,  8) \
+    SC( 22,     10,        8,      3,  no, yes,   7,  8) \
+    SC( 23,     10,        8,      4,  no, yes,   1,  8) \
+                                                         \
+    SC( 24,     11,        9,      1,  no, yes,   5,  9) \
+    SC( 25,     11,        9,      2,  no, yes,   3,  9) \
+    SC( 26,     11,        9,      3,  no, yes,   7,  9) \
+    SC( 27,     11,        9,      4, yes, yes,   1,  9) \
+                                                         \
+    SC( 28,     12,       10,      1,  no, yes,   5, no) \
+    SC( 29,     12,       10,      2,  no, yes,   3, no) \
+    SC( 30,     12,       10,      3,  no, yes,   7, no) \
+    SC( 31,     12,       10,      4, yes, yes,   2, no) \
+                                                         \
+    SC( 32,     13,       11,      1,  no, yes,   5, no) \
+    SC( 33,     13,       11,      2, yes, yes,   3, no) \
+    SC( 34,     13,       11,      3,  no, yes,   7, no) \
+    SC( 35,     13,       11,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 36,     14,       12,      1, yes,  no,   0, no) \
+    SC( 37,     14,       12,      2, yes,  no,   0, no) \
+    SC( 38,     14,       12,      3, yes,  no,   0, no) \
+    SC( 39,     14,       12,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 40,     15,       13,      1, yes,  no,   0, no) \
+    SC( 41,     15,       13,      2, yes,  no,   0, no) \
+    SC( 42,     15,       13,      3, yes,  no,   0, no) \
+    SC( 43,     15,       13,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 44,     16,       14,      1, yes,  no,   0, no) \
+    SC( 45,     16,       14,      2, yes,  no,   0, no) \
+    SC( 46,     16,       14,      3, yes,  no,   0, no) \
+    SC( 47,     16,       14,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 48,     17,       15,      1, yes,  no,   0, no) \
+    SC( 49,     17,       15,      2, yes,  no,   0, no) \
+    SC( 50,     17,       15,      3, yes,  no,   0, no) \
+    SC( 51,     17,       15,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 52,     18,       16,      1, yes,  no,   0, no) \
+    SC( 53,     18,       16,      2, yes,  no,   0, no) \
+    SC( 54,     18,       16,      3, yes,  no,   0, no) \
+    SC( 55,     18,       16,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 56,     19,       17,      1, yes,  no,   0, no) \
+    SC( 57,     19,       17,      2, yes,  no,   0, no) \
+    SC( 58,     19,       17,      3, yes,  no,   0, no) \
+    SC( 59,     19,       17,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 60,     20,       18,      1, yes,  no,   0, no) \
+    SC( 61,     20,       18,      2, yes,  no,   0, no) \
+    SC( 62,     20,       18,      3, yes,  no,   0, no) \
+    SC( 63,     20,       18,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 64,     21,       19,      1, yes,  no,   0, no) \
+    SC( 65,     21,       19,      2, yes,  no,   0, no) \
+    SC( 66,     21,       19,      3, yes,  no,   0, no) \
+    SC( 67,     21,       19,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 68,     22,       20,      1, yes,  no,   0, no) \
+    SC( 69,     22,       20,      2, yes,  no,   0, no) \
+    SC( 70,     22,       20,      3, yes,  no,   0, no) \
+    SC( 71,     22,       20,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 72,     23,       21,      1, yes,  no,   0, no) \
+    SC( 73,     23,       21,      2, yes,  no,   0, no) \
+    SC( 74,     23,       21,      3, yes,  no,   0, no) \
+    SC( 75,     23,       21,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 76,     24,       22,      1, yes,  no,   0, no) \
+    SC( 77,     24,       22,      2, yes,  no,   0, no) \
+    SC( 78,     24,       22,      3, yes,  no,   0, no) \
+    SC( 79,     24,       22,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 80,     25,       23,      1, yes,  no,   0, no) \
+    SC( 81,     25,       23,      2, yes,  no,   0, no) \
+    SC( 82,     25,       23,      3, yes,  no,   0, no) \
+    SC( 83,     25,       23,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 84,     26,       24,      1, yes,  no,   0, no) \
+    SC( 85,     26,       24,      2, yes,  no,   0, no) \
+    SC( 86,     26,       24,      3, yes,  no,   0, no) \
+    SC( 87,     26,       24,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 88,     27,       25,      1, yes,  no,   0, no) \
+    SC( 89,     27,       25,      2, yes,  no,   0, no) \
+    SC( 90,     27,       25,      3, yes,  no,   0, no) \
+    SC( 91,     27,       25,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 92,     28,       26,      1, yes,  no,   0, no) \
+    SC( 93,     28,       26,      2, yes,  no,   0, no) \
+    SC( 94,     28,       26,      3, yes,  no,   0, no) \
+    SC( 95,     28,       26,      4, yes,  no,   0, no) \
+                                                         \
+    SC( 96,     29,       27,      1, yes,  no,   0, no) \
+    SC( 97,     29,       27,      2, yes,  no,   0, no) \
+    SC( 98,     29,       27,      3, yes,  no,   0, no) \
+    SC( 99,     29,       27,      4, yes,  no,   0, no) \
+                                                         \
+    SC(100,     30,       28,      1, yes,  no,   0, no) \
+    SC(101,     30,       28,      2, yes,  no,   0, no) \
+    SC(102,     30,       28,      3, yes,  no,   0, no) \
+    SC(103,     30,       28,      4, yes,  no,   0, no) \
+                                                         \
+    SC(104,     31,       29,      1, yes,  no,   0, no) \
+    SC(105,     31,       29,      2, yes,  no,   0, no) \
+    SC(106,     31,       29,      3, yes,  no,   0, no) \
+    SC(107,     31,       29,      4, yes,  no,   0, no) \
+                                                         \
+    SC(108,     32,       30,      1, yes,  no,   0, no) \
+    SC(109,     32,       30,      2, yes,  no,   0, no) \
+    SC(110,     32,       30,      3, yes,  no,   0, no) \
+    SC(111,     32,       30,      4, yes,  no,   0, no) \
+                                                         \
+    SC(112,     33,       31,      1, yes,  no,   0, no) \
+    SC(113,     33,       31,      2, yes,  no,   0, no) \
+    SC(114,     33,       31,      3, yes,  no,   0, no) \
+    SC(115,     33,       31,      4, yes,  no,   0, no) \
+                                                         \
+    SC(116,     34,       32,      1, yes,  no,   0, no) \
+    SC(117,     34,       32,      2, yes,  no,   0, no) \
+    SC(118,     34,       32,      3, yes,  no,   0, no) \
+    SC(119,     34,       32,      4, yes,  no,   0, no) \
+                                                         \
+    SC(120,     35,       33,      1, yes,  no,   0, no) \
+    SC(121,     35,       33,      2, yes,  no,   0, no) \
+    SC(122,     35,       33,      3, yes,  no,   0, no) \
+    SC(123,     35,       33,      4, yes,  no,   0, no) \
+                                                         \
+    SC(124,     36,       34,      1, yes,  no,   0, no) \
+    SC(125,     36,       34,      2, yes,  no,   0, no) \
+    SC(126,     36,       34,      3, yes,  no,   0, no) \
+    SC(127,     36,       34,      4, yes,  no,   0, no) \
+                                                         \
+    SC(128,     37,       35,      1, yes,  no,   0, no) \
+    SC(129,     37,       35,      2, yes,  no,   0, no) \
+    SC(130,     37,       35,      3, yes,  no,   0, no) \
+    SC(131,     37,       35,      4, yes,  no,   0, no) \
+                                                         \
+    SC(132,     38,       36,      1, yes,  no,   0, no) \
+    SC(133,     38,       36,      2, yes,  no,   0, no) \
+    SC(134,     38,       36,      3, yes,  no,   0, no) \
+    SC(135,     38,       36,      4, yes,  no,   0, no) \
+                                                         \
+    SC(136,     39,       37,      1, yes,  no,   0, no) \
+    SC(137,     39,       37,      2, yes,  no,   0, no) \
+    SC(138,     39,       37,      3, yes,  no,   0, no) \
+    SC(139,     39,       37,      4, yes,  no,   0, no) \
+                                                         \
+    SC(140,     40,       38,      1, yes,  no,   0, no) \
+    SC(141,     40,       38,      2, yes,  no,   0, no) \
+    SC(142,     40,       38,      3, yes,  no,   0, no) \
+    SC(143,     40,       38,      4, yes,  no,   0, no) \
+                                                         \
+    SC(144,     41,       39,      1, yes,  no,   0, no) \
+    SC(145,     41,       39,      2, yes,  no,   0, no) \
+    SC(146,     41,       39,      3, yes,  no,   0, no) \
+    SC(147,     41,       39,      4, yes,  no,   0, no) \
+                                                         \
+    SC(148,     42,       40,      1, yes,  no,   0, no) \
+    SC(149,     42,       40,      2, yes,  no,   0, no) \
+    SC(150,     42,       40,      3, yes,  no,   0, no) \
+    SC(151,     42,       40,      4, yes,  no,   0, no) \
+                                                         \
+    SC(152,     43,       41,      1, yes,  no,   0, no) \
+    SC(153,     43,       41,      2, yes,  no,   0, no) \
+    SC(154,     43,       41,      3, yes,  no,   0, no) \
+    SC(155,     43,       41,      4, yes,  no,   0, no) \
+                                                         \
+    SC(156,     44,       42,      1, yes,  no,   0, no) \
+    SC(157,     44,       42,      2, yes,  no,   0, no) \
+    SC(158,     44,       42,      3, yes,  no,   0, no) \
+    SC(159,     44,       42,      4, yes,  no,   0, no) \
+                                                         \
+    SC(160,     45,       43,      1, yes,  no,   0, no) \
+    SC(161,     45,       43,      2, yes,  no,   0, no) \
+    SC(162,     45,       43,      3, yes,  no,   0, no) \
+    SC(163,     45,       43,      4, yes,  no,   0, no) \
+                                                         \
+    SC(164,     46,       44,      1, yes,  no,   0, no) \
+    SC(165,     46,       44,      2, yes,  no,   0, no) \
+    SC(166,     46,       44,      3, yes,  no,   0, no) \
+    SC(167,     46,       44,      4, yes,  no,   0, no) \
+                                                         \
+    SC(168,     47,       45,      1, yes,  no,   0, no) \
+    SC(169,     47,       45,      2, yes,  no,   0, no) \
+    SC(170,     47,       45,      3, yes,  no,   0, no) \
+    SC(171,     47,       45,      4, yes,  no,   0, no) \
+                                                         \
+    SC(172,     48,       46,      1, yes,  no,   0, no) \
+    SC(173,     48,       46,      2, yes,  no,   0, no) \
+    SC(174,     48,       46,      3, yes,  no,   0, no) \
+    SC(175,     48,       46,      4, yes,  no,   0, no) \
+                                                         \
+    SC(176,     49,       47,      1, yes,  no,   0, no) \
+    SC(177,     49,       47,      2, yes,  no,   0, no) \
+    SC(178,     49,       47,      3, yes,  no,   0, no) \
+    SC(179,     49,       47,      4, yes,  no,   0, no) \
+                                                         \
+    SC(180,     50,       48,      1, yes,  no,   0, no) \
+    SC(181,     50,       48,      2, yes,  no,   0, no) \
+    SC(182,     50,       48,      3, yes,  no,   0, no) \
+    SC(183,     50,       48,      4, yes,  no,   0, no) \
+                                                         \
+    SC(184,     51,       49,      1, yes,  no,   0, no) \
+    SC(185,     51,       49,      2, yes,  no,   0, no) \
+    SC(186,     51,       49,      3, yes,  no,   0, no) \
+    SC(187,     51,       49,      4, yes,  no,   0, no) \
+                                                         \
+    SC(188,     52,       50,      1, yes,  no,   0, no) \
+    SC(189,     52,       50,      2, yes,  no,   0, no) \
+    SC(190,     52,       50,      3, yes,  no,   0, no) \
+    SC(191,     52,       50,      4, yes,  no,   0, no) \
+                                                         \
+    SC(192,     53,       51,      1, yes,  no,   0, no) \
+    SC(193,     53,       51,      2, yes,  no,   0, no) \
+    SC(194,     53,       51,      3, yes,  no,   0, no) \
+    SC(195,     53,       51,      4, yes,  no,   0, no) \
+                                                         \
+    SC(196,     54,       52,      1, yes,  no,   0, no) \
+    SC(197,     54,       52,      2, yes,  no,   0, no) \
+    SC(198,     54,       52,      3, yes,  no,   0, no) \
+    SC(199,     54,       52,      4, yes,  no,   0, no) \
+                                                         \
+    SC(200,     55,       53,      1, yes,  no,   0, no) \
+    SC(201,     55,       53,      2, yes,  no,   0, no) \
+    SC(202,     55,       53,      3, yes,  no,   0, no) \
+    SC(203,     55,       53,      4, yes,  no,   0, no) \
+                                                         \
+    SC(204,     56,       54,      1, yes,  no,   0, no) \
+    SC(205,     56,       54,      2, yes,  no,   0, no) \
+    SC(206,     56,       54,      3, yes,  no,   0, no) \
+    SC(207,     56,       54,      4, yes,  no,   0, no) \
+                                                         \
+    SC(208,     57,       55,      1, yes,  no,   0, no) \
+    SC(209,     57,       55,      2, yes,  no,   0, no) \
+    SC(210,     57,       55,      3, yes,  no,   0, no) \
+    SC(211,     57,       55,      4, yes,  no,   0, no) \
+                                                         \
+    SC(212,     58,       56,      1, yes,  no,   0, no) \
+    SC(213,     58,       56,      2, yes,  no,   0, no) \
+    SC(214,     58,       56,      3, yes,  no,   0, no) \
+    SC(215,     58,       56,      4, yes,  no,   0, no) \
+                                                         \
+    SC(216,     59,       57,      1, yes,  no,   0, no) \
+    SC(217,     59,       57,      2, yes,  no,   0, no) \
+    SC(218,     59,       57,      3, yes,  no,   0, no) \
+    SC(219,     59,       57,      4, yes,  no,   0, no) \
+                                                         \
+    SC(220,     60,       58,      1, yes,  no,   0, no) \
+    SC(221,     60,       58,      2, yes,  no,   0, no) \
+    SC(222,     60,       58,      3, yes,  no,   0, no) \
+    SC(223,     60,       58,      4, yes,  no,   0, no) \
+                                                         \
+    SC(224,     61,       59,      1, yes,  no,   0, no) \
+    SC(225,     61,       59,      2, yes,  no,   0, no) \
+    SC(226,     61,       59,      3, yes,  no,   0, no) \
+    SC(227,     61,       59,      4, yes,  no,   0, no) \
+                                                         \
+    SC(228,     62,       60,      1, yes,  no,   0, no) \
+    SC(229,     62,       60,      2, yes,  no,   0, no) \
+    SC(230,     62,       60,      3, yes,  no,   0, no) \
+
+#define SIZE_CLASSES_DEFINED
+#define NTBINS			0
+#define NLBINS			28
+#define NBINS			35
+#define NSIZES			231
+#define LG_CEIL_NSIZES		8
+#define NPSIZES			199
+#define LG_TINY_MAXCLASS	"NA"
+#define LOOKUP_MAXCLASS		((((size_t)1) << 11) + (((size_t)4) << 9))
+#define SMALL_MAXCLASS		((((size_t)1) << 13) + (((size_t)3) << 11))
+#define LG_LARGE_MINCLASS	14
+#define LARGE_MINCLASS		(ZU(1) << LG_LARGE_MINCLASS)
+#define LARGE_MAXCLASS		((((size_t)1) << 62) + (((size_t)3) << 60))
+#endif
+
+#ifndef SIZE_CLASSES_DEFINED
+#  error "No size class definitions match configuration"
+#endif
+#undef SIZE_CLASSES_DEFINED
+/*
+ * The size2index_tab lookup table uses uint8_t to encode each bin index, so we
+ * cannot support more than 256 small size classes.
+ */
+#if (NBINS > 256)
+#  error "Too many small size classes"
+#endif
+
+#endif /* JEMALLOC_INTERNAL_SIZE_CLASSES_H */
diff --git a/src/arena.c b/src/arena.c
index a94516ed..8a7cac0f 100644
--- a/src/arena.c
+++ b/src/arena.c
@@ -90,9 +90,9 @@ arena_stats_merge(tsdn_t *tsdn, arena_t *arena, unsigned *nthreads,
 	arena_basic_stats_merge(tsdn, arena, nthreads, dss, dirty_decay_ms,
 	    muzzy_decay_ms, nactive, ndirty, nmuzzy);
 
-	size_t base_allocated, base_resident, base_mapped;
+	size_t base_allocated, base_resident, base_mapped, metadata_thp;
 	base_stats_get(tsdn, arena->base, &base_allocated, &base_resident,
-	    &base_mapped);
+	    &base_mapped, &metadata_thp);
 
 	arena_stats_lock(tsdn, &arena->stats);
 
@@ -127,6 +127,7 @@ arena_stats_merge(tsdn_t *tsdn, arena_t *arena, unsigned *nthreads,
 
 	arena_stats_accum_zu(&astats->base, base_allocated);
 	arena_stats_accum_zu(&astats->internal, arena_internal_get(arena));
+	arena_stats_accum_zu(&astats->metadata_thp, metadata_thp);
 	arena_stats_accum_zu(&astats->resident, base_resident +
 	    (((atomic_load_zu(&arena->nactive, ATOMIC_RELAXED) +
 	    extents_npages_get(&arena->extents_dirty) +
diff --git a/src/base.c b/src/base.c
index 421f295a..f3c61661 100644
--- a/src/base.c
+++ b/src/base.c
@@ -12,8 +12,22 @@
 
 static base_t *b0;
 
+metadata_thp_mode_t opt_metadata_thp = METADATA_THP_DEFAULT;
+
+const char *metadata_thp_mode_names[] = {
+	"disabled",
+	"auto",
+	"always"
+};
+
 /******************************************************************************/
 
+static inline bool
+metadata_thp_madvise(void) {
+	return (metadata_thp_enabled() &&
+	    (init_system_thp_mode == thp_mode_default));
+}
+
 static void *
 base_map(tsdn_t *tsdn, extent_hooks_t *extent_hooks, unsigned ind, size_t size) {
 	void *addr;
@@ -93,7 +107,12 @@ base_unmap(tsdn_t *tsdn, extent_hooks_t *extent_hooks, unsigned ind, void *addr,
 		post_reentrancy(tsd);
 	}
 label_done:
-	return;
+	if (metadata_thp_madvise()) {
+		/* Set NOHUGEPAGE after unmap to avoid kernel defrag. */
+		assert(((uintptr_t)addr & HUGEPAGE_MASK) == 0 &&
+		    (size & HUGEPAGE_MASK) == 0);
+		pages_nohuge(addr, size);
+	}
 }
 
 static void
@@ -121,6 +140,42 @@ base_get_num_blocks(base_t *base, bool with_new_block) {
 	return n_blocks;
 }
 
+static void
+base_auto_thp_switch(tsdn_t *tsdn, base_t *base) {
+	assert(opt_metadata_thp == metadata_thp_auto);
+	malloc_mutex_assert_owner(tsdn, &base->mtx);
+	if (base->auto_thp_switched) {
+		return;
+	}
+	/* Called when adding a new block. */
+	bool should_switch;
+	if (base_ind_get(base) != 0) {
+		should_switch = (base_get_num_blocks(base, true) ==
+		    BASE_AUTO_THP_THRESHOLD);
+	} else {
+		should_switch = (base_get_num_blocks(base, true) ==
+		    BASE_AUTO_THP_THRESHOLD_A0);
+	}
+	if (!should_switch) {
+		return;
+	}
+
+	base->auto_thp_switched = true;
+	assert(!config_stats || base->n_thp == 0);
+	/* Make the initial blocks THP lazily. */
+	base_block_t *block = base->blocks;
+	while (block != NULL) {
+		assert((block->size & HUGEPAGE_MASK) == 0);
+		pages_huge(block, block->size);
+		if (config_stats) {
+			base->n_thp += HUGEPAGE_CEILING(block->size -
+			    extent_bsize_get(&block->extent)) >> LG_HUGEPAGE;
+		}
+		block = block->next;
+		assert(block == NULL || (base_ind_get(base) == 0));
+	}
+}
+
 static void *
 base_extent_bump_alloc_helper(extent_t *extent, size_t *gap_size, size_t size,
     size_t alignment) {
@@ -163,6 +218,13 @@ base_extent_bump_alloc_post(base_t *base, extent_t *extent, size_t gap_size,
 		    PAGE_CEILING((uintptr_t)addr - gap_size);
 		assert(base->allocated <= base->resident);
 		assert(base->resident <= base->mapped);
+		if (metadata_thp_madvise() && (opt_metadata_thp ==
+		    metadata_thp_always || base->auto_thp_switched)) {
+			base->n_thp += (HUGEPAGE_CEILING((uintptr_t)addr + size)
+			    - HUGEPAGE_CEILING((uintptr_t)addr - gap_size)) >>
+			    LG_HUGEPAGE;
+			assert(base->mapped >= base->n_thp << LG_HUGEPAGE);
+		}
 	}
 }
 
@@ -211,6 +273,24 @@ base_block_alloc(tsdn_t *tsdn, base_t *base, extent_hooks_t *extent_hooks,
 		return NULL;
 	}
 
+	if (metadata_thp_madvise()) {
+		void *addr = (void *)block;
+		assert(((uintptr_t)addr & HUGEPAGE_MASK) == 0 &&
+		    (block_size & HUGEPAGE_MASK) == 0);
+		if (opt_metadata_thp == metadata_thp_always) {
+			pages_huge(addr, block_size);
+		} else if (opt_metadata_thp == metadata_thp_auto &&
+		    base != NULL) {
+			/* base != NULL indicates this is not a new base. */
+			malloc_mutex_lock(tsdn, &base->mtx);
+			base_auto_thp_switch(tsdn, base);
+			if (base->auto_thp_switched) {
+				pages_huge(addr, block_size);
+			}
+			malloc_mutex_unlock(tsdn, &base->mtx);
+		}
+	}
+
 	*pind_last = sz_psz2ind(block_size);
 	block->size = block_size;
 	block->next = NULL;
@@ -247,8 +327,16 @@ base_extent_alloc(tsdn_t *tsdn, base_t *base, size_t size, size_t alignment) {
 		base->allocated += sizeof(base_block_t);
 		base->resident += PAGE_CEILING(sizeof(base_block_t));
 		base->mapped += block->size;
+		if (metadata_thp_madvise() &&
+		    !(opt_metadata_thp == metadata_thp_auto
+		      && !base->auto_thp_switched)) {
+			assert(base->n_thp > 0);
+			base->n_thp += HUGEPAGE_CEILING(sizeof(base_block_t)) >>
+			    LG_HUGEPAGE;
+		}
 		assert(base->allocated <= base->resident);
 		assert(base->resident <= base->mapped);
+		assert(base->n_thp << LG_HUGEPAGE <= base->mapped);
 	}
 	return &block->extent;
 }
@@ -283,6 +371,7 @@ base_new(tsdn_t *tsdn, unsigned ind, extent_hooks_t *extent_hooks) {
 	base->pind_last = pind_last;
 	base->extent_sn_next = extent_sn_next;
 	base->blocks = block;
+	base->auto_thp_switched = false;
 	for (szind_t i = 0; i < SC_NSIZES; i++) {
 		extent_heap_new(&base->avail[i]);
 	}
@@ -290,8 +379,12 @@ base_new(tsdn_t *tsdn, unsigned ind, extent_hooks_t *extent_hooks) {
 		base->allocated = sizeof(base_block_t);
 		base->resident = PAGE_CEILING(sizeof(base_block_t));
 		base->mapped = block->size;
+		base->n_thp = (opt_metadata_thp == metadata_thp_always) &&
+		    metadata_thp_madvise() ? HUGEPAGE_CEILING(sizeof(base_block_t))
+		    >> LG_HUGEPAGE : 0;
 		assert(base->allocated <= base->resident);
 		assert(base->resident <= base->mapped);
+		assert(base->n_thp << LG_HUGEPAGE <= base->mapped);
 	}
 	base_extent_bump_alloc_post(base, &block->extent, gap_size, base,
 	    base_size);
@@ -386,7 +479,7 @@ base_alloc_extent(tsdn_t *tsdn, base_t *base) {
 
 void
 base_stats_get(tsdn_t *tsdn, base_t *base, size_t *allocated, size_t *resident,
-    size_t *mapped) {
+    size_t *mapped, size_t *n_thp) {
 	cassert(config_stats);
 
 	malloc_mutex_lock(tsdn, &base->mtx);
@@ -395,6 +488,7 @@ base_stats_get(tsdn_t *tsdn, base_t *base, size_t *allocated, size_t *resident,
 	*allocated = base->allocated;
 	*resident = base->resident;
 	*mapped = base->mapped;
+	*n_thp = base->n_thp;
 	malloc_mutex_unlock(tsdn, &base->mtx);
 }
 
diff --git a/src/ctl.c b/src/ctl.c
index 998c14db..0ffbd0d5 100644
--- a/src/ctl.c
+++ b/src/ctl.c
@@ -82,6 +82,7 @@ CTL_PROTO(config_xmalloc)
 CTL_PROTO(opt_abort)
 CTL_PROTO(opt_abort_conf)
 CTL_PROTO(opt_confirm_conf)
+CTL_PROTO(opt_metadata_thp)
 CTL_PROTO(opt_retain)
 CTL_PROTO(opt_dss)
 CTL_PROTO(opt_narenas)
@@ -98,6 +99,7 @@ CTL_PROTO(opt_zero)
 CTL_PROTO(opt_utrace)
 CTL_PROTO(opt_xmalloc)
 CTL_PROTO(opt_tcache)
+CTL_PROTO(opt_thp)
 CTL_PROTO(opt_lg_extent_max_active_fit)
 CTL_PROTO(opt_lg_tcache_max)
 CTL_PROTO(opt_prof)
@@ -205,6 +207,7 @@ CTL_PROTO(stats_arenas_i_muzzy_nmadvise)
 CTL_PROTO(stats_arenas_i_muzzy_purged)
 CTL_PROTO(stats_arenas_i_base)
 CTL_PROTO(stats_arenas_i_internal)
+CTL_PROTO(stats_arenas_i_metadata_thp)
 CTL_PROTO(stats_arenas_i_tcache_bytes)
 CTL_PROTO(stats_arenas_i_resident)
 CTL_PROTO(stats_arenas_i_abandoned_vm)
@@ -215,6 +218,7 @@ CTL_PROTO(stats_background_thread_num_threads)
 CTL_PROTO(stats_background_thread_num_runs)
 CTL_PROTO(stats_background_thread_run_interval)
 CTL_PROTO(stats_metadata)
+CTL_PROTO(stats_metadata_thp)
 CTL_PROTO(stats_resident)
 CTL_PROTO(stats_mapped)
 CTL_PROTO(stats_retained)
@@ -305,6 +309,7 @@ static const ctl_named_node_t opt_node[] = {
 	{NAME("abort"),		CTL(opt_abort)},
 	{NAME("abort_conf"),	CTL(opt_abort_conf)},
 	{NAME("confirm_conf"),	CTL(opt_confirm_conf)},
+	{NAME("metadata_thp"),	CTL(opt_metadata_thp)},
 	{NAME("retain"),	CTL(opt_retain)},
 	{NAME("dss"),		CTL(opt_dss)},
 	{NAME("narenas"),	CTL(opt_narenas)},
@@ -321,6 +326,7 @@ static const ctl_named_node_t opt_node[] = {
 	{NAME("utrace"),	CTL(opt_utrace)},
 	{NAME("xmalloc"),	CTL(opt_xmalloc)},
 	{NAME("tcache"),	CTL(opt_tcache)},
+	{NAME("thp"),		CTL(opt_thp)},
 	{NAME("lg_extent_max_active_fit"), CTL(opt_lg_extent_max_active_fit)},
 	{NAME("lg_tcache_max"),	CTL(opt_lg_tcache_max)},
 	{NAME("prof"),		CTL(opt_prof)},
@@ -535,6 +541,7 @@ static const ctl_named_node_t stats_arenas_i_node[] = {
 	{NAME("muzzy_purged"),	CTL(stats_arenas_i_muzzy_purged)},
 	{NAME("base"),		CTL(stats_arenas_i_base)},
 	{NAME("internal"),	CTL(stats_arenas_i_internal)},
+	{NAME("metadata_thp"),	CTL(stats_arenas_i_metadata_thp)},
 	{NAME("tcache_bytes"),	CTL(stats_arenas_i_tcache_bytes)},
 	{NAME("resident"),	CTL(stats_arenas_i_resident)},
 	{NAME("abandoned_vm"),	CTL(stats_arenas_i_abandoned_vm)},
@@ -575,6 +582,7 @@ static const ctl_named_node_t stats_node[] = {
 	{NAME("allocated"),	CTL(stats_allocated)},
 	{NAME("active"),	CTL(stats_active)},
 	{NAME("metadata"),	CTL(stats_metadata)},
+	{NAME("metadata_thp"),	CTL(stats_metadata_thp)},
 	{NAME("resident"),	CTL(stats_resident)},
 	{NAME("mapped"),	CTL(stats_mapped)},
 	{NAME("retained"),	CTL(stats_retained)},
@@ -872,6 +880,8 @@ MUTEX_PROF_ARENA_MUTEXES
 			    &astats->astats.internal);
 			accum_atomic_zu(&sdstats->astats.resident,
 			    &astats->astats.resident);
+			accum_atomic_zu(&sdstats->astats.metadata_thp,
+			    &astats->astats.metadata_thp);
 		} else {
 			assert(atomic_load_zu(
 			    &astats->astats.internal, ATOMIC_RELAXED) == 0);
@@ -1061,6 +1071,8 @@ ctl_refresh(tsdn_t *tsdn) {
 		    &ctl_sarena->astats->astats.base, ATOMIC_RELAXED) +
 		    atomic_load_zu(&ctl_sarena->astats->astats.internal,
 			ATOMIC_RELAXED);
+		ctl_stats->metadata_thp = atomic_load_zu(
+		    &ctl_sarena->astats->astats.metadata_thp, ATOMIC_RELAXED);
 		ctl_stats->resident = atomic_load_zu(
 		    &ctl_sarena->astats->astats.resident, ATOMIC_RELAXED);
 		ctl_stats->mapped = atomic_load_zu(
@@ -1745,6 +1757,8 @@ CTL_RO_CONFIG_GEN(config_xmalloc, bool)
 CTL_RO_NL_GEN(opt_abort, opt_abort, bool)
 CTL_RO_NL_GEN(opt_abort_conf, opt_abort_conf, bool)
 CTL_RO_NL_GEN(opt_confirm_conf, opt_confirm_conf, bool)
+CTL_RO_NL_GEN(opt_metadata_thp, metadata_thp_mode_names[opt_metadata_thp],
+    const char *)
 CTL_RO_NL_GEN(opt_retain, opt_retain, bool)
 CTL_RO_NL_GEN(opt_dss, opt_dss, const char *)
 CTL_RO_NL_GEN(opt_narenas, opt_narenas, unsigned)
@@ -1762,6 +1776,7 @@ CTL_RO_NL_CGEN(config_fill, opt_zero, opt_zero, bool)
 CTL_RO_NL_CGEN(config_utrace, opt_utrace, opt_utrace, bool)
 CTL_RO_NL_CGEN(config_xmalloc, opt_xmalloc, opt_xmalloc, bool)
 CTL_RO_NL_GEN(opt_tcache, opt_tcache, bool)
+CTL_RO_NL_GEN(opt_thp, thp_mode_names[opt_thp], const char *)
 CTL_RO_NL_GEN(opt_lg_extent_max_active_fit, opt_lg_extent_max_active_fit,
     size_t)
 CTL_RO_NL_GEN(opt_lg_tcache_max, opt_lg_tcache_max, ssize_t)
@@ -2790,6 +2805,7 @@ prof_log_stop_ctl(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,
 CTL_RO_CGEN(config_stats, stats_allocated, ctl_stats->allocated, size_t)
 CTL_RO_CGEN(config_stats, stats_active, ctl_stats->active, size_t)
 CTL_RO_CGEN(config_stats, stats_metadata, ctl_stats->metadata, size_t)
+CTL_RO_CGEN(config_stats, stats_metadata_thp, ctl_stats->metadata_thp, size_t)
 CTL_RO_CGEN(config_stats, stats_resident, ctl_stats->resident, size_t)
 CTL_RO_CGEN(config_stats, stats_mapped, ctl_stats->mapped, size_t)
 CTL_RO_CGEN(config_stats, stats_retained, ctl_stats->retained, size_t)
@@ -2849,6 +2865,9 @@ CTL_RO_CGEN(config_stats, stats_arenas_i_base,
 CTL_RO_CGEN(config_stats, stats_arenas_i_internal,
     atomic_load_zu(&arenas_i(mib[2])->astats->astats.internal, ATOMIC_RELAXED),
     size_t)
+CTL_RO_CGEN(config_stats, stats_arenas_i_metadata_thp,
+    atomic_load_zu(&arenas_i(mib[2])->astats->astats.metadata_thp,
+    ATOMIC_RELAXED), size_t)
 CTL_RO_CGEN(config_stats, stats_arenas_i_tcache_bytes,
     atomic_load_zu(&arenas_i(mib[2])->astats->astats.tcache_bytes,
     ATOMIC_RELAXED), size_t)
diff --git a/src/extent.c b/src/extent.c
index 9cbeb400..9237f903 100644
--- a/src/extent.c
+++ b/src/extent.c
@@ -1116,7 +1116,8 @@ extent_need_manual_zero(arena_t *arena) {
 	 * default extent hooks installed (in which case the purge semantics may
 	 * change); or 2) transparent huge pages enabled.
 	 */
-	return !arena_has_default_hooks(arena);
+	return (!arena_has_default_hooks(arena) ||
+		(opt_thp == thp_mode_always));
 }
 
 /*
@@ -1240,6 +1241,9 @@ extent_alloc_default_impl(tsdn_t *tsdn, arena_t *arena, void *new_addr,
 	void *ret = extent_alloc_core(tsdn, arena, new_addr, size, alignment, zero,
 	    commit, (dss_prec_t)atomic_load_u(&arena->dss_prec,
 	    ATOMIC_RELAXED));
+	if (have_madvise_huge && ret) {
+		pages_set_thp_state(ret, size);
+	}
 	return ret;
 }
 
diff --git a/src/jemalloc.c b/src/jemalloc.c
index 854bbff2..321f7f29 100644
--- a/src/jemalloc.c
+++ b/src/jemalloc.c
@@ -1033,7 +1033,6 @@ obtain_malloc_conf(unsigned which_source, char buf[PATH_MAX + 1]) {
 	return ret;
 }
 
-#if 0
 static void
 malloc_conf_init_helper(sc_data_t *sc_data, unsigned bin_shard_sizes[SC_NBINS],
     bool initial_call, const char *opts_cache[MALLOC_CONF_NSOURCES],
@@ -1188,6 +1187,23 @@ malloc_conf_init_helper(sc_data_t *sc_data, unsigned bin_shard_sizes[SC_NBINS],
 
 			CONF_HANDLE_BOOL(opt_abort, "abort")
 			CONF_HANDLE_BOOL(opt_abort_conf, "abort_conf")
+			if (strncmp("metadata_thp", k, klen) == 0) {
+				int i;
+				bool match = false;
+				for (i = 0; i < metadata_thp_mode_limit; i++) {
+					if (strncmp(metadata_thp_mode_names[i],
+					    v, vlen) == 0) {
+						opt_metadata_thp = i;
+						match = true;
+						break;
+					}
+				}
+				if (!match) {
+					CONF_ERROR("Invalid conf value",
+					    k, klen, v, vlen);
+				}
+				CONF_CONTINUE;
+			}
 			CONF_HANDLE_BOOL(opt_retain, "retain")
 			if (strncmp("dss", k, klen) == 0) {
 				int i;
@@ -1387,6 +1403,27 @@ malloc_conf_init_helper(sc_data_t *sc_data, unsigned bin_shard_sizes[SC_NBINS],
 					CONF_CONTINUE;
 				}
 			}
+			if (CONF_MATCH("thp")) {
+				bool match = false;
+				for (int i = 0; i < thp_mode_names_limit; i++) {
+					if (strncmp(thp_mode_names[i],v, vlen)
+					    == 0) {
+						if (!have_madvise_huge) {
+							CONF_ERROR(
+							    "No THP support",
+							    k, klen, v, vlen);
+						}
+						opt_thp = i;
+						match = true;
+						break;
+					}
+				}
+				if (!match) {
+					CONF_ERROR("Invalid conf value",
+					    k, klen, v, vlen);
+				}
+				CONF_CONTINUE;
+			}
 			CONF_ERROR("Invalid conf pair", k, klen, v, vlen);
 #undef CONF_ERROR
 #undef CONF_CONTINUE
@@ -1422,7 +1459,7 @@ malloc_conf_init(sc_data_t *sc_data, unsigned bin_shard_sizes[SC_NBINS]) {
 	malloc_conf_init_helper(sc_data, bin_shard_sizes, false, opts_cache,
 	    NULL);
 }
-#endif
+
 #undef MALLOC_CONF_NSOURCES
 
 static bool
@@ -1478,7 +1515,7 @@ malloc_init_hard_a0_locked() {
 	if (config_prof) {
 		prof_boot0();
 	}
-	// malloc_conf_init(&sc_data, bin_shard_sizes);
+	malloc_conf_init(&sc_data, bin_shard_sizes);
 	sz_boot(&sc_data);
 	bin_boot(&sc_data, bin_shard_sizes);
 
diff --git a/src/pages.c b/src/pages.c
index 614f3aa9..d6a9ba9d 100644
--- a/src/pages.c
+++ b/src/pages.c
@@ -33,7 +33,16 @@ static size_t	os_page;
 #  define PAGES_PROT_DECOMMIT (PROT_NONE)
 static int	mmap_flags;
 #endif
-#define os_overcommits true
+static bool	os_overcommits;
+
+const char *thp_mode_names[] = {
+	"default",
+	"always",
+	"never",
+	"not supported"
+};
+thp_mode_t opt_thp = THP_MODE_DEFAULT;
+thp_mode_t init_system_thp_mode;
 
 /* Runtime support for lazy purge. Irrelevant when !pages_can_purge_lazy. */
 static bool pages_can_purge_lazy_runtime = true;
@@ -537,6 +546,75 @@ os_overcommits_proc(void) {
 }
 #endif
 
+void
+pages_set_thp_state (void *ptr, size_t size) {
+	if (opt_thp == thp_mode_default || opt_thp == init_system_thp_mode) {
+		return;
+	}
+	assert(opt_thp != thp_mode_not_supported &&
+	    init_system_thp_mode != thp_mode_not_supported);
+
+	if (opt_thp == thp_mode_always
+	    && init_system_thp_mode != thp_mode_never) {
+		assert(init_system_thp_mode == thp_mode_default);
+		pages_huge_unaligned(ptr, size);
+	} else if (opt_thp == thp_mode_never) {
+		assert(init_system_thp_mode == thp_mode_default ||
+		    init_system_thp_mode == thp_mode_always);
+		pages_nohuge_unaligned(ptr, size);
+	}
+}
+
+static void
+init_thp_state(void) {
+	if (!have_madvise_huge) {
+		if (metadata_thp_enabled() && opt_abort) {
+			malloc_write("<jemalloc>: no MADV_HUGEPAGE support\n");
+			abort();
+		}
+		goto label_error;
+	}
+
+	static const char sys_state_madvise[] = "always [madvise] never\n";
+	static const char sys_state_always[] = "[always] madvise never\n";
+	static const char sys_state_never[] = "always madvise [never]\n";
+	char buf[sizeof(sys_state_madvise)];
+
+#if defined(JEMALLOC_USE_SYSCALL) && defined(SYS_open)
+	int fd = (int)syscall(SYS_open,
+	    "/sys/kernel/mm/transparent_hugepage/enabled", O_RDONLY);
+#else
+	int fd = open("/sys/kernel/mm/transparent_hugepage/enabled", O_RDONLY);
+#endif
+	if (fd == -1) {
+		goto label_error;
+	}
+
+	ssize_t nread = malloc_read_fd(fd, &buf, sizeof(buf));
+#if defined(JEMALLOC_USE_SYSCALL) && defined(SYS_close)
+	syscall(SYS_close, fd);
+#else
+	close(fd);
+#endif
+
+        if (nread < 0) {
+		goto label_error; 
+        }
+
+	if (strncmp(buf, sys_state_madvise, (size_t)nread) == 0) {
+		init_system_thp_mode = thp_mode_default;
+	} else if (strncmp(buf, sys_state_always, (size_t)nread) == 0) {
+		init_system_thp_mode = thp_mode_always;
+	} else if (strncmp(buf, sys_state_never, (size_t)nread) == 0) {
+		init_system_thp_mode = thp_mode_never;
+	} else {
+		goto label_error;
+	}
+	return;
+label_error:
+	opt_thp = init_system_thp_mode = thp_mode_not_supported;
+}
+
 bool
 pages_boot(void) {
 	os_page = os_page_detect();
@@ -552,6 +630,28 @@ pages_boot(void) {
 	mmap_flags = MAP_PRIVATE | MAP_ANON;
 #endif
 
+#if defined(__ANDROID__)
+  /* Android always supports overcommits. */
+  os_overcommits = true;
+#else  /* __ANDROID__ */
+
+#ifdef JEMALLOC_SYSCTL_VM_OVERCOMMIT
+	os_overcommits = os_overcommits_sysctl();
+#elif defined(JEMALLOC_PROC_SYS_VM_OVERCOMMIT_MEMORY)
+	os_overcommits = os_overcommits_proc();
+#  ifdef MAP_NORESERVE
+	if (os_overcommits) {
+		mmap_flags |= MAP_NORESERVE;
+	}
+#  endif
+#else
+	os_overcommits = false;
+#endif
+
+#endif  /* __ANDROID__ */
+
+	init_thp_state();
+
 #ifdef __FreeBSD__
 	/*
 	 * FreeBSD doesn't need the check; madvise(2) is known to work.
diff --git a/src/stats.c b/src/stats.c
index bfe02a49..118e05d2 100644
--- a/src/stats.c
+++ b/src/stats.c
@@ -664,7 +664,7 @@ stats_arena_print(emitter_t *emitter, unsigned i, bool bins, bool large,
 	const char *dss;
 	ssize_t dirty_decay_ms, muzzy_decay_ms;
 	size_t page, pactive, pdirty, pmuzzy, mapped, retained;
-	size_t base, internal, resident, extent_avail;
+	size_t base, internal, resident, metadata_thp, extent_avail;
 	uint64_t dirty_npurge, dirty_nmadvise, dirty_purged;
 	uint64_t muzzy_npurge, muzzy_nmadvise, muzzy_purged;
 	size_t small_allocated;
@@ -960,6 +960,7 @@ stats_arena_print(emitter_t *emitter, unsigned i, bool bins, bool large,
 	GET_AND_EMIT_MEM_STAT(retained)
 	GET_AND_EMIT_MEM_STAT(base)
 	GET_AND_EMIT_MEM_STAT(internal)
+	GET_AND_EMIT_MEM_STAT(metadata_thp)
 	GET_AND_EMIT_MEM_STAT(tcache_bytes)
 	GET_AND_EMIT_MEM_STAT(resident)
 	GET_AND_EMIT_MEM_STAT(abandoned_vm)
@@ -1071,6 +1072,7 @@ stats_general_print(emitter_t *emitter) {
 	OPT_WRITE_UNSIGNED("narenas")
 	OPT_WRITE_CHAR_P("percpu_arena")
 	OPT_WRITE_SIZE_T("oversize_threshold")
+	OPT_WRITE_CHAR_P("metadata_thp")
 	OPT_WRITE_BOOL_MUTABLE("background_thread", "background_thread")
 	OPT_WRITE_SSIZE_T_MUTABLE("dirty_decay_ms", "arenas.dirty_decay_ms")
 	OPT_WRITE_SSIZE_T_MUTABLE("muzzy_decay_ms", "arenas.muzzy_decay_ms")
@@ -1081,6 +1083,7 @@ stats_general_print(emitter_t *emitter) {
 	OPT_WRITE_BOOL("xmalloc")
 	OPT_WRITE_BOOL("tcache")
 	OPT_WRITE_SSIZE_T("lg_tcache_max")
+	OPT_WRITE_CHAR_P("thp")
 	OPT_WRITE_BOOL("prof")
 	OPT_WRITE_CHAR_P("prof_prefix")
 	OPT_WRITE_BOOL_MUTABLE("prof_active", "prof.active")
@@ -1233,7 +1236,7 @@ stats_print_helper(emitter_t *emitter, bool merged, bool destroyed,
 	 * These should be deleted.  We keep them around for a while, to aid in
 	 * the transition to the emitter code.
 	 */
-	size_t allocated, active, metadata, resident, mapped,
+	size_t allocated, active, metadata, metadata_thp, resident, mapped,
 	    retained;
 	size_t num_background_threads;
 	uint64_t background_thread_num_runs, background_thread_run_interval;
@@ -1241,6 +1244,7 @@ stats_print_helper(emitter_t *emitter, bool merged, bool destroyed,
 	CTL_GET("stats.allocated", &allocated, size_t);
 	CTL_GET("stats.active", &active, size_t);
 	CTL_GET("stats.metadata", &metadata, size_t);
+	CTL_GET("stats.metadata_thp", &metadata_thp, size_t);
 	CTL_GET("stats.resident", &resident, size_t);
 	CTL_GET("stats.mapped", &mapped, size_t);
 	CTL_GET("stats.retained", &retained, size_t);
@@ -1263,13 +1267,15 @@ stats_print_helper(emitter_t *emitter, bool merged, bool destroyed,
 	emitter_json_kv(emitter, "allocated", emitter_type_size, &allocated);
 	emitter_json_kv(emitter, "active", emitter_type_size, &active);
 	emitter_json_kv(emitter, "metadata", emitter_type_size, &metadata);
+	emitter_json_kv(emitter, "metadata_thp", emitter_type_size,
+	    &metadata_thp);
 	emitter_json_kv(emitter, "resident", emitter_type_size, &resident);
 	emitter_json_kv(emitter, "mapped", emitter_type_size, &mapped);
 	emitter_json_kv(emitter, "retained", emitter_type_size, &retained);
 
 	emitter_table_printf(emitter, "Allocated: %zu, active: %zu, "
-	    "metadata: %zu, resident: %zu, mapped: %zu, "
-	    "retained: %zu\n", allocated, active, metadata,
+	    "metadata: %zu (n_thp %zu), resident: %zu, mapped: %zu, "
+	    "retained: %zu\n", allocated, active, metadata, metadata_thp,
 	    resident, mapped, retained);
 
 	/* Background thread stats. */
diff --git a/test/unit/base.c b/test/unit/base.c
index 7fa24ac0..6b792cf2 100644
--- a/test/unit/base.c
+++ b/test/unit/base.c
@@ -28,22 +28,28 @@ static extent_hooks_t hooks_not_null = {
 
 TEST_BEGIN(test_base_hooks_default) {
 	base_t *base;
-	size_t allocated0, allocated1, resident, mapped;
+	size_t allocated0, allocated1, resident, mapped, n_thp;
 
 	tsdn_t *tsdn = tsd_tsdn(tsd_fetch());
 	base = base_new(tsdn, 0, (extent_hooks_t *)&extent_hooks_default);
 
 	if (config_stats) {
-		base_stats_get(tsdn, base, &allocated0, &resident, &mapped);
+		base_stats_get(tsdn, base, &allocated0, &resident, &mapped,
+		    &n_thp);
 		assert_zu_ge(allocated0, sizeof(base_t),
 		    "Base header should count as allocated");
+		if (opt_metadata_thp == metadata_thp_always) {
+			assert_zu_gt(n_thp, 0,
+			    "Base should have 1 THP at least.");
+		}
 	}
 
 	assert_ptr_not_null(base_alloc(tsdn, base, 42, 1),
 	    "Unexpected base_alloc() failure");
 
 	if (config_stats) {
-		base_stats_get(tsdn, base, &allocated1, &resident, &mapped);
+		base_stats_get(tsdn, base, &allocated1, &resident, &mapped,
+		    &n_thp);
 		assert_zu_ge(allocated1 - allocated0, 42,
 		    "At least 42 bytes were allocated by base_alloc()");
 	}
@@ -55,7 +61,7 @@ TEST_END
 TEST_BEGIN(test_base_hooks_null) {
 	extent_hooks_t hooks_orig;
 	base_t *base;
-	size_t allocated0, allocated1, resident, mapped;
+	size_t allocated0, allocated1, resident, mapped, n_thp;
 
 	extent_hooks_prep();
 	try_dalloc = false;
@@ -71,16 +77,22 @@ TEST_BEGIN(test_base_hooks_null) {
 	assert_ptr_not_null(base, "Unexpected base_new() failure");
 
 	if (config_stats) {
-		base_stats_get(tsdn, base, &allocated0, &resident, &mapped);
+		base_stats_get(tsdn, base, &allocated0, &resident, &mapped,
+		    &n_thp);
 		assert_zu_ge(allocated0, sizeof(base_t),
 		    "Base header should count as allocated");
+		if (opt_metadata_thp == metadata_thp_always) {
+			assert_zu_gt(n_thp, 0,
+			    "Base should have 1 THP at least.");
+		}
 	}
 
 	assert_ptr_not_null(base_alloc(tsdn, base, 42, 1),
 	    "Unexpected base_alloc() failure");
 
 	if (config_stats) {
-		base_stats_get(tsdn, base, &allocated1, &resident, &mapped);
+		base_stats_get(tsdn, base, &allocated1, &resident, &mapped,
+		    &n_thp);
 		assert_zu_ge(allocated1 - allocated0, 42,
 		    "At least 42 bytes were allocated by base_alloc()");
 	}
diff --git a/test/unit/mallctl.c b/test/unit/mallctl.c
index 64572cc9..3a75ac04 100644
--- a/test/unit/mallctl.c
+++ b/test/unit/mallctl.c
@@ -160,6 +160,7 @@ TEST_BEGIN(test_mallctl_opt) {
 	TEST_MALLCTL_OPT(bool, abort, always);
 	TEST_MALLCTL_OPT(bool, abort_conf, always);
 	TEST_MALLCTL_OPT(bool, confirm_conf, always);
+	TEST_MALLCTL_OPT(const char *, metadata_thp, always);
 	TEST_MALLCTL_OPT(bool, retain, always);
 	TEST_MALLCTL_OPT(const char *, dss, always);
 	TEST_MALLCTL_OPT(unsigned, narenas, always);
@@ -176,6 +177,7 @@ TEST_BEGIN(test_mallctl_opt) {
 	TEST_MALLCTL_OPT(bool, tcache, always);
 	TEST_MALLCTL_OPT(size_t, lg_extent_max_active_fit, always);
 	TEST_MALLCTL_OPT(size_t, lg_tcache_max, always);
+	TEST_MALLCTL_OPT(const char *, thp, always);
 	TEST_MALLCTL_OPT(bool, prof, prof);
 	TEST_MALLCTL_OPT(const char *, prof_prefix, prof);
 	TEST_MALLCTL_OPT(bool, prof_active, prof);
diff --git a/test/unit/pages.c b/test/unit/pages.c
new file mode 100644
index 00000000..ee729eec
--- /dev/null
+++ b/test/unit/pages.c
@@ -0,0 +1,29 @@
+#include "test/jemalloc_test.h"
+
+TEST_BEGIN(test_pages_huge) {
+	size_t alloc_size;
+	bool commit;
+	void *pages, *hugepage;
+
+	alloc_size = HUGEPAGE * 2 - PAGE;
+	commit = true;
+	pages = pages_map(NULL, alloc_size, PAGE, &commit);
+	assert_ptr_not_null(pages, "Unexpected pages_map() error");
+
+	if (init_system_thp_mode == thp_mode_default) {
+	    hugepage = (void *)(ALIGNMENT_CEILING((uintptr_t)pages, HUGEPAGE));
+	    assert_b_ne(pages_huge(hugepage, HUGEPAGE), have_madvise_huge,
+	        "Unexpected pages_huge() result");
+	    assert_false(pages_nohuge(hugepage, HUGEPAGE),
+	        "Unexpected pages_nohuge() result");
+	}
+
+	pages_unmap(pages, alloc_size);
+}
+TEST_END
+
+int
+main(void) {
+	return test(
+	    test_pages_huge);
+}
-- 
2.32.0

