From d050b12a21f50e09fc3ff4aa2be20b399ab948f3 Mon Sep 17 00:00:00 2001
From: Pranav Vashi <neobuddy89@gmail.com>
Date: Mon, 17 Jan 2022 21:09:53 +0530
Subject: [PATCH 7/8] SystemUI: Kill old privacy indicator icons completely

* It's messy to keep both versions.

Change-Id: I610a2b0f51c611c693d4f4f2bb1d65ecf00f0072
Signed-off-by: Pranav Vashi <neobuddy89@gmail.com>
---
 .../SystemUI/res/xml/status_bar_prefs.xml     |   5 -
 .../qs/HeaderPrivacyIconsController.kt        |  30 +-----
 .../statusbar/phone/DemoStatusIcons.java      |   6 --
 .../statusbar/phone/PhoneStatusBarPolicy.java | 102 ------------------
 4 files changed, 1 insertion(+), 142 deletions(-)

diff --git a/packages/SystemUI/res/xml/status_bar_prefs.xml b/packages/SystemUI/res/xml/status_bar_prefs.xml
index 865f84473375..bf8993834604 100644
--- a/packages/SystemUI/res/xml/status_bar_prefs.xml
+++ b/packages/SystemUI/res/xml/status_bar_prefs.xml
@@ -57,11 +57,6 @@
         android:key="bluetooth"
         android:title="@string/quick_settings_bluetooth_label" />
 
-    <com.android.systemui.tuner.StatusBarSwitch
-        android:icon="@drawable/ic_statusbar_camera"
-        android:key="cameratoggle"
-        android:title="@string/quick_settings_camera_label" />
-
     <!-- nfc -->
     <!-- tty -->
     <!-- speakerphone -->
diff --git a/packages/SystemUI/src/com/android/systemui/qs/HeaderPrivacyIconsController.kt b/packages/SystemUI/src/com/android/systemui/qs/HeaderPrivacyIconsController.kt
index 0941a2082cfd..73f14897711c 100644
--- a/packages/SystemUI/src/com/android/systemui/qs/HeaderPrivacyIconsController.kt
+++ b/packages/SystemUI/src/com/android/systemui/qs/HeaderPrivacyIconsController.kt
@@ -72,9 +72,6 @@ class HeaderPrivacyIconsController @Inject constructor(
     private var locationIndicatorsEnabled = false
     private var privacyChipLogged = false
     private var safetyCenterEnabled = false
-    private val cameraSlot = privacyChip.resources.getString(R.string.status_bar_camera)
-    private val micSlot = privacyChip.resources.getString(R.string.status_bar_microphone)
-    private val locationSlot = privacyChip.resources.getString(R.string.status_bar_location)
 
     private val safetyCenterReceiver = object : BroadcastReceiver() {
         override fun onReceive(context: Context, intent: Intent) {
@@ -134,7 +131,6 @@ class HeaderPrivacyIconsController @Inject constructor(
         }
 
         private fun update() {
-            updatePrivacyIconSlots()
             setChipVisibility(privacyChip.privacyList.isNotEmpty())
         }
     }
@@ -160,9 +156,6 @@ class HeaderPrivacyIconsController @Inject constructor(
         setChipVisibility(privacyChip.visibility == View.VISIBLE)
         micCameraIndicatorsEnabled = privacyItemController.micCameraAvailable
         locationIndicatorsEnabled = privacyItemController.locationAvailable
-
-        // Ignore privacy icons because they show in the space above QQS
-        updatePrivacyIconSlots()
     }
 
     private fun showSafetyCenter() {
@@ -220,25 +213,4 @@ class HeaderPrivacyIconsController @Inject constructor(
         privacyChip.visibility = if (visible) View.VISIBLE else View.GONE
         chipVisibilityListener?.onChipVisibilityRefreshed(visible)
     }
-
-    private fun updatePrivacyIconSlots() {
-        if (getChipEnabled()) {
-            if (micCameraIndicatorsEnabled) {
-                iconContainer.addIgnoredSlot(cameraSlot)
-                iconContainer.addIgnoredSlot(micSlot)
-            } else {
-                iconContainer.removeIgnoredSlot(cameraSlot)
-                iconContainer.removeIgnoredSlot(micSlot)
-            }
-            if (locationIndicatorsEnabled) {
-                iconContainer.addIgnoredSlot(locationSlot)
-            } else {
-                iconContainer.removeIgnoredSlot(locationSlot)
-            }
-        } else {
-            iconContainer.removeIgnoredSlot(cameraSlot)
-            iconContainer.removeIgnoredSlot(micSlot)
-            iconContainer.removeIgnoredSlot(locationSlot)
-        }
-    }
-}
\ No newline at end of file
+}
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/DemoStatusIcons.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/DemoStatusIcons.java
index 5deb08a75dff..03ce4d6a0fee 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/DemoStatusIcons.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/DemoStatusIcons.java
@@ -147,12 +147,6 @@ public class DemoStatusIcons extends StatusIconContainer implements DemoMode, Da
                     ? R.drawable.stat_sys_data_bluetooth_connected : 0;
             updateSlot("bluetooth", null, iconId);
         }
-        String location = args.getString("location");
-        if (location != null) {
-            int iconId = location.equals("show") ? PhoneStatusBarPolicy.LOCATION_STATUS_ICON_ID
-                    : 0;
-            updateSlot("location", null, iconId);
-        }
         String alarm = args.getString("alarm");
         if (alarm != null) {
             int iconId = alarm.equals("show") ? R.drawable.stat_sys_alarm
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBarPolicy.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBarPolicy.java
index 740e1d7406c5..8b6e0da64e90 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBarPolicy.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBarPolicy.java
@@ -59,10 +59,6 @@ import com.android.systemui.dagger.qualifiers.DisplayId;
 import com.android.systemui.dagger.qualifiers.Main;
 import com.android.systemui.dagger.qualifiers.UiBackground;
 import com.android.systemui.display.domain.interactor.ConnectedDisplayInteractor;
-import com.android.systemui.privacy.PrivacyItem;
-import com.android.systemui.privacy.PrivacyItemController;
-import com.android.systemui.privacy.PrivacyType;
-import com.android.systemui.privacy.logging.PrivacyLogger;
 import com.android.systemui.qs.tiles.DndTile;
 import com.android.systemui.qs.tiles.RotationLockTile;
 import com.android.systemui.screenrecord.RecordingController;
@@ -77,7 +73,6 @@ import com.android.systemui.statusbar.policy.DeviceProvisionedController;
 import com.android.systemui.statusbar.policy.DeviceProvisionedController.DeviceProvisionedListener;
 import com.android.systemui.statusbar.policy.HotspotController;
 import com.android.systemui.statusbar.policy.KeyguardStateController;
-import com.android.systemui.statusbar.policy.LocationController;
 import com.android.systemui.statusbar.policy.NextAlarmController;
 import com.android.systemui.statusbar.policy.RotationLockController;
 import com.android.systemui.statusbar.policy.RotationLockController.RotationLockControllerCallback;
@@ -108,14 +103,10 @@ public class PhoneStatusBarPolicy
                 ZenModeController.Callback,
                 DeviceProvisionedListener,
                 KeyguardStateController.Callback,
-                PrivacyItemController.Callback,
-                LocationController.LocationChangeCallback,
                 RecordingController.RecordingStateChangeCallback {
     private static final String TAG = "PhoneStatusBarPolicy";
     private static final boolean DEBUG = Log.isLoggable(TAG, Log.DEBUG);
 
-    static final int LOCATION_STATUS_ICON_ID = PrivacyType.TYPE_LOCATION.getIconId();
-
     private final String mSlotCast;
     private final String mSlotHotspot;
     private final String mSlotBluetooth;
@@ -128,9 +119,6 @@ public class PhoneStatusBarPolicy
     private final String mSlotRotate;
     private final String mSlotHeadset;
     private final String mSlotDataSaver;
-    private final String mSlotLocation;
-    private final String mSlotMicrophone;
-    private final String mSlotCamera;
     private final String mSlotSensorsOff;
     private final String mSlotScreenRecord;
     private final String mSlotConnectedDisplay;
@@ -161,14 +149,11 @@ public class PhoneStatusBarPolicy
     private final ZenModeController mZenController;
     private final DeviceProvisionedController mProvisionedController;
     private final KeyguardStateController mKeyguardStateController;
-    private final LocationController mLocationController;
-    private final PrivacyItemController mPrivacyItemController;
     private final Executor mMainExecutor;
     private final Executor mUiBgExecutor;
     private final SensorPrivacyController mSensorPrivacyController;
     private final RecordingController mRecordingController;
     private final RingerModeTracker mRingerModeTracker;
-    private final PrivacyLogger mPrivacyLogger;
     private final ConnectivityManager mConnectivityManager;
     private final NetworkPolicyManager mNetworkPolicyManager;
 
@@ -196,15 +181,12 @@ public class PhoneStatusBarPolicy
             ZenModeController zenModeController,
             DeviceProvisionedController deviceProvisionedController,
             KeyguardStateController keyguardStateController,
-            LocationController locationController,
             SensorPrivacyController sensorPrivacyController, AlarmManager alarmManager,
             UserManager userManager, UserTracker userTracker,
             DevicePolicyManager devicePolicyManager, RecordingController recordingController,
             @Nullable TelecomManager telecomManager, @DisplayId int displayId,
             @Main SharedPreferences sharedPreferences, DateFormatUtil dateFormatUtil,
             RingerModeTracker ringerModeTracker,
-            PrivacyItemController privacyItemController,
-            PrivacyLogger privacyLogger,
             ConnectedDisplayInteractor connectedDisplayInteractor,
             JavaAdapter javaAdapter
     ) {
@@ -229,15 +211,12 @@ public class PhoneStatusBarPolicy
         mZenController = zenModeController;
         mProvisionedController = deviceProvisionedController;
         mKeyguardStateController = keyguardStateController;
-        mLocationController = locationController;
-        mPrivacyItemController = privacyItemController;
         mSensorPrivacyController = sensorPrivacyController;
         mRecordingController = recordingController;
         mMainExecutor = mainExecutor;
         mUiBgExecutor = uiBgExecutor;
         mTelecomManager = telecomManager;
         mRingerModeTracker = ringerModeTracker;
-        mPrivacyLogger = privacyLogger;
         mJavaAdapter = javaAdapter;
         mConnectivityManager = context.getSystemService(ConnectivityManager.class);
         mNetworkPolicyManager = context.getSystemService(NetworkPolicyManager.class);
@@ -257,9 +236,6 @@ public class PhoneStatusBarPolicy
         mSlotRotate = resources.getString(com.android.internal.R.string.status_bar_rotate);
         mSlotHeadset = resources.getString(com.android.internal.R.string.status_bar_headset);
         mSlotDataSaver = resources.getString(com.android.internal.R.string.status_bar_data_saver);
-        mSlotLocation = resources.getString(com.android.internal.R.string.status_bar_location);
-        mSlotMicrophone = resources.getString(com.android.internal.R.string.status_bar_microphone);
-        mSlotCamera = resources.getString(com.android.internal.R.string.status_bar_camera);
         mSlotSensorsOff = resources.getString(com.android.internal.R.string.status_bar_sensors_off);
         mSlotScreenRecord = resources.getString(
                 com.android.internal.R.string.status_bar_screen_record);
@@ -341,25 +317,6 @@ public class PhoneStatusBarPolicy
         mIconController.setIconVisibility(mSlotDataSaver, false);
 
 
-        // privacy items
-        String microphoneString = mResources.getString(PrivacyType.TYPE_MICROPHONE.getNameId());
-        String microphoneDesc = mResources.getString(
-                R.string.ongoing_privacy_chip_content_multiple_apps, microphoneString);
-        mIconController.setIcon(mSlotMicrophone, PrivacyType.TYPE_MICROPHONE.getIconId(),
-                microphoneDesc);
-        mIconController.setIconVisibility(mSlotMicrophone, false);
-
-        String cameraString = mResources.getString(PrivacyType.TYPE_CAMERA.getNameId());
-        String cameraDesc = mResources.getString(
-                R.string.ongoing_privacy_chip_content_multiple_apps, cameraString);
-        mIconController.setIcon(mSlotCamera, PrivacyType.TYPE_CAMERA.getIconId(),
-                cameraDesc);
-        mIconController.setIconVisibility(mSlotCamera, false);
-
-        mIconController.setIcon(mSlotLocation, LOCATION_STATUS_ICON_ID,
-                mResources.getString(R.string.accessibility_location_active));
-        mIconController.setIconVisibility(mSlotLocation, false);
-
         // sensors off
         mIconController.setIcon(mSlotSensorsOff, R.drawable.stat_sys_sensors_off,
                 mResources.getString(R.string.accessibility_sensors_off_active));
@@ -384,9 +341,7 @@ public class PhoneStatusBarPolicy
         mNextAlarmController.addCallback(mNextAlarmCallback);
         mDataSaver.addCallback(this);
         mKeyguardStateController.addCallback(this);
-        mPrivacyItemController.addCallback(this);
         mSensorPrivacyController.addCallback(mSensorPrivacyListener);
-        mLocationController.addCallback(this);
         mRecordingController.addCallback(this);
         mJavaAdapter.alwaysCollectFlow(mConnectedDisplayInteractor.getConnectedDisplayState(),
                 this::onConnectedDisplayAvailabilityChanged);
@@ -807,63 +762,6 @@ public class PhoneStatusBarPolicy
         mIconController.setIconVisibility(mSlotDataSaver, isDataSaving);
     }
 
-    @Override  // PrivacyItemController.Callback
-    public void onPrivacyItemsChanged(List<PrivacyItem> privacyItems) {
-        updatePrivacyItems(privacyItems);
-    }
-
-    private void updatePrivacyItems(List<PrivacyItem> items) {
-        boolean showCamera = false;
-        boolean showMicrophone = false;
-        boolean showLocation = false;
-        for (PrivacyItem item : items) {
-            if (item == null /* b/124234367 */) {
-                Log.e(TAG, "updatePrivacyItems - null item found");
-                StringWriter out = new StringWriter();
-                mPrivacyItemController.dump(new PrintWriter(out), null);
-                // Throw so we can look into this
-                throw new NullPointerException(out.toString());
-            }
-            switch (item.getPrivacyType()) {
-                case TYPE_CAMERA:
-                    showCamera = true;
-                    break;
-                case TYPE_LOCATION:
-                    showLocation = true;
-                    break;
-                case TYPE_MICROPHONE:
-                    showMicrophone = true;
-                    break;
-            }
-        }
-
-        // Disabling for now, but keeping the log
-        /*
-        mIconController.setIconVisibility(mSlotCamera, showCamera);
-        mIconController.setIconVisibility(mSlotMicrophone, showMicrophone);
-        if (mPrivacyItemController.getLocationAvailable()) {
-            mIconController.setIconVisibility(mSlotLocation, showLocation);
-        }
-         */
-        mPrivacyLogger.logStatusBarIconsVisible(showCamera, showMicrophone,  showLocation);
-    }
-
-    @Override
-    public void onLocationActiveChanged(boolean active) {
-        if (!mPrivacyItemController.getLocationAvailable()) {
-            updateLocationFromController();
-        }
-    }
-
-    // Updates the status view based on the current state of location requests.
-    private void updateLocationFromController() {
-        if (mLocationController.isLocationActive()) {
-            mIconController.setIconVisibility(mSlotLocation, true);
-        } else {
-            mIconController.setIconVisibility(mSlotLocation, false);
-        }
-    }
-
     private BroadcastReceiver mIntentReceiver = new BroadcastReceiver() {
         @Override
         public void onReceive(Context context, Intent intent) {
-- 
2.34.1

