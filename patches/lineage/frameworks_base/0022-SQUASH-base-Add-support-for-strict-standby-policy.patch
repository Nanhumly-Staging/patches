From d1c9071c08a59cdf436210318128a0da175a2b0c Mon Sep 17 00:00:00 2001
From: LibXZR <i@xzr.moe>
Date: Sat, 11 Jun 2022 16:13:53 +0800
Subject: [PATCH] [SQUASH]base: Add support for strict standby policy

When dismissing from recents, this will force stop apps with restricted
battery usage and put them into RESTRICTED standby bucket. Also all
restrictions will be imposed even when device is charging.

This can be useful to kill dirty vigorous Chinese apps.

[ghostrider-reborn]:
- Add more restrictions (jobs, alarms)
- Show toast only in ENG build
- Remove settings toggle

Change-Id: I8f075ef48c5775971e3e0b8b1ea843d70a2e44c4

 BroadcastQueue: Skip delivering broadcasts to restricted apps

Fixes plenty of timeouts blocking the whole queue.

Also strict standby is enhanced that nothing could wakeup a
static broadcast receiver.

mnri: adapted to 13
Change-Id: I7b748a63287319e765d1548b28987f56be5e599e
Signed-off-by: LibXZR <i@xzr.moe>
Signed-off-by: minaripenguin <minaripenguin@users.noreply.github.com>

Co-authored-by: Adithya R <gh0strider.2k18.reborn@gmail.com>
[adapted to 14]
Change-Id: Idd1ff7f6795d4c92270935c18a340233d5ffe49a
Signed-off-by: minaripenguin <minaripenguin@users.noreply.github.com>
Signed-off-by: Pranav Vashi <neobuddy89@gmail.com>
---
 .../android/server/AppStateTrackerImpl.java    | 15 +++++++++++++++
 .../server/usage/AppStandbyController.java     |  2 +-
 .../server/am/ActivityManagerService.java      |  6 ++++++
 .../android/server/am/BroadcastQueueImpl.java  | 14 ++++++++++++++
 .../server/wm/ActivityTaskManagerService.java  |  4 ++++
 .../server/wm/ActivityTaskSupervisor.java      | 18 ++++++++++++++++++
 6 files changed, 58 insertions(+), 1 deletion(-)

diff --git a/apex/jobscheduler/service/java/com/android/server/AppStateTrackerImpl.java b/apex/jobscheduler/service/java/com/android/server/AppStateTrackerImpl.java
index cb83966278bb..04a2bddc7a08 100644
--- a/apex/jobscheduler/service/java/com/android/server/AppStateTrackerImpl.java
+++ b/apex/jobscheduler/service/java/com/android/server/AppStateTrackerImpl.java
@@ -1131,6 +1131,9 @@ public class AppStateTrackerImpl implements AppStateTracker {
             return false;
         }
         synchronized (mLock) {
+            if (isAppRestricted(uid, packageName)) {
+                return true;
+            }
             final int appId = UserHandle.getAppId(uid);
             if (ArrayUtils.contains(mPowerExemptAllAppIds, appId)) {
                 return false;
@@ -1175,6 +1178,9 @@ public class AppStateTrackerImpl implements AppStateTracker {
             return false;
         }
         synchronized (mLock) {
+            if (isAppRestricted(uid, packageName)) {
+                return true;
+            }
             final int appId = UserHandle.getAppId(uid);
             if (ArrayUtils.contains(mPowerExemptAllAppIds, appId)
                     || ArrayUtils.contains(mTempExemptAppIds, appId)) {
@@ -1296,6 +1302,15 @@ public class AppStateTrackerImpl implements AppStateTracker {
         }
     }
 
+    /**
+     * @return whether the app is restricted battery usage
+     */
+    public boolean isAppRestricted(int uid, String packageName) {
+        return mAppOpsManager.checkOpNoThrow(
+                AppOpsManager.OP_RUN_ANY_IN_BACKGROUND,
+                uid, packageName) != AppOpsManager.MODE_ALLOWED;
+    }
+
     /**
      * Dump the internal state to the given PrintWriter. Can be included in the dump
      * of a binder service to be output on the shell command "dumpsys".
diff --git a/apex/jobscheduler/service/java/com/android/server/usage/AppStandbyController.java b/apex/jobscheduler/service/java/com/android/server/usage/AppStandbyController.java
index 19bc7160e16a..a38391d393d9 100644
--- a/apex/jobscheduler/service/java/com/android/server/usage/AppStandbyController.java
+++ b/apex/jobscheduler/service/java/com/android/server/usage/AppStandbyController.java
@@ -1853,7 +1853,7 @@ public class AppStandbyController
                     // shouldn't be surprising.
                     // Exclude REASON_SUB_FORCED_USER_FLAG_INTERACTION since the RESTRICTED bucket
                     // isn't directly visible in that flow.
-                    if (Build.IS_DEBUGGABLE
+                    if (Build.IS_ENG
                             && (reason & REASON_SUB_MASK)
                             != REASON_SUB_FORCED_USER_FLAG_INTERACTION) {
                         Toast.makeText(mContext,
diff --git a/services/core/java/com/android/server/am/ActivityManagerService.java b/services/core/java/com/android/server/am/ActivityManagerService.java
index 663ba8a38d77..19dc86dc1cd2 100644
--- a/services/core/java/com/android/server/am/ActivityManagerService.java
+++ b/services/core/java/com/android/server/am/ActivityManagerService.java
@@ -20871,4 +20871,10 @@ public class ActivityManagerService extends IActivityManager.Stub
         }
         mOomAdjuster.mCachedAppOptimizer.binderError(debugPid, app, code, flags, err);
     }
+
+    public boolean shouldSkipBootCompletedBroadcastForPackage(ApplicationInfo info) {
+        return getAppOpsManager().checkOpNoThrow(
+                AppOpsManager.OP_RUN_ANY_IN_BACKGROUND,
+                info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED;
+    }
 }
diff --git a/services/core/java/com/android/server/am/BroadcastQueueImpl.java b/services/core/java/com/android/server/am/BroadcastQueueImpl.java
index 3c56752d08e3..b52b800fc754 100644
--- a/services/core/java/com/android/server/am/BroadcastQueueImpl.java
+++ b/services/core/java/com/android/server/am/BroadcastQueueImpl.java
@@ -990,6 +990,12 @@ public class BroadcastQueueImpl extends BroadcastQueue {
         return intent;
     }
 
+    private boolean isBootCompletedIntent(Intent intent) {
+        return Intent.ACTION_BOOT_COMPLETED.equals(intent.getAction()) ||
+                Intent.ACTION_LOCKED_BOOT_COMPLETED.equals(intent.getAction()) ||
+                Intent.ACTION_MEDIA_MOUNTED.equals(intent.getAction());
+    }
+
     public void processNextBroadcastLocked(boolean fromMsg, boolean skipOomAdj) {
         BroadcastRecord r;
 
@@ -1406,6 +1412,14 @@ public class BroadcastQueueImpl extends BroadcastQueue {
             }
         }
 
+        if (!skip) {
+            if (app == null) {
+                if (mService.shouldSkipBootCompletedBroadcastForPackage(info.activityInfo.applicationInfo)) {
+                    skip = true;
+                }
+            }
+        }
+
         if (skip) {
             if (DEBUG_BROADCAST)  Slog.v(TAG_BROADCAST,
                     "Skipping delivery of ordered [" + mQueueName + "] "
diff --git a/services/core/java/com/android/server/wm/ActivityTaskManagerService.java b/services/core/java/com/android/server/wm/ActivityTaskManagerService.java
index b26cddaccc04..117ac2d3acec 100644
--- a/services/core/java/com/android/server/wm/ActivityTaskManagerService.java
+++ b/services/core/java/com/android/server/wm/ActivityTaskManagerService.java
@@ -286,6 +286,7 @@ import com.android.server.sdksandbox.SdkSandboxManagerLocal;
 import com.android.server.statusbar.StatusBarManagerInternal;
 import com.android.server.uri.NeededUriGrants;
 import com.android.server.uri.UriGrantsManagerInternal;
+import com.android.server.usage.AppStandbyInternal;
 import com.android.server.wallpaper.WallpaperManagerInternal;
 import com.android.wm.shell.Flags;
 
@@ -808,6 +809,8 @@ public class ActivityTaskManagerService extends IActivityTaskManager.Stub {
     // Lineage sdk activity related helper
     private LineageActivityManager mLineageActivityManager;
 
+    public AppStandbyInternal mAppStandbyInternal;
+
     private final class SettingObserver extends ContentObserver {
         private final Uri mFontScaleUri = Settings.System.getUriFor(FONT_SCALE);
         private final Uri mHideErrorDialogsUri = Settings.Global.getUriFor(HIDE_ERROR_DIALOGS);
@@ -893,6 +896,7 @@ public class ActivityTaskManagerService extends IActivityTaskManager.Stub {
             mGrammaticalManagerInternal = LocalServices.getService(
                     GrammaticalInflectionManagerInternal.class);
         }
+        mAppStandbyInternal = LocalServices.getService(AppStandbyInternal.class);
     }
 
     public void onInitPowerManagement() {
diff --git a/services/core/java/com/android/server/wm/ActivityTaskSupervisor.java b/services/core/java/com/android/server/wm/ActivityTaskSupervisor.java
index 2cda1f55b038..b909be6fc59c 100644
--- a/services/core/java/com/android/server/wm/ActivityTaskSupervisor.java
+++ b/services/core/java/com/android/server/wm/ActivityTaskSupervisor.java
@@ -38,6 +38,7 @@ import static android.app.WindowConfiguration.WINDOWING_MODE_FREEFORM;
 import static android.app.WindowConfiguration.WINDOWING_MODE_FULLSCREEN;
 import static android.app.WindowConfiguration.WINDOWING_MODE_PINNED;
 import static android.app.WindowConfiguration.WINDOWING_MODE_UNDEFINED;
+import static android.app.usage.UsageStatsManager.REASON_MAIN_FORCED_BY_USER;
 import static android.content.pm.PackageManager.NOTIFY_PACKAGE_USE_ACTIVITY;
 import static android.content.pm.PackageManager.PERMISSION_DENIED;
 import static android.content.pm.PackageManager.PERMISSION_GRANTED;
@@ -212,6 +213,7 @@ public class ActivityTaskSupervisor implements RecentTasks.Callbacks {
     private static final int REPORT_PIP_MODE_CHANGED_MSG = FIRST_SUPERVISOR_TASK_MSG + 15;
     private static final int START_HOME_MSG = FIRST_SUPERVISOR_TASK_MSG + 16;
     private static final int TOP_RESUMED_STATE_LOSS_TIMEOUT_MSG = FIRST_SUPERVISOR_TASK_MSG + 17;
+    private static final int STRICT_STANDBY_KILL_MSG = FIRST_SUPERVISOR_TASK_MSG + 18;
 
     // Used to indicate that windows of activities should be preserved during the resize.
     static final boolean PRESERVE_WINDOWS = true;
@@ -1793,6 +1795,11 @@ public class ActivityTaskSupervisor implements RecentTasks.Callbacks {
     private void killTaskProcessesIfPossible(Task task) {
         task.mKillProcessesOnDestroyed = false;
         final String pkg = task.getBasePackageName();
+        if (getAppOpsManager().checkOpNoThrow(
+                AppOpsManager.OP_RUN_ANY_IN_BACKGROUND,
+                task.effectiveUid, pkg) != AppOpsManager.MODE_ALLOWED) {
+            mHandler.sendMessage(mHandler.obtainMessage(STRICT_STANDBY_KILL_MSG, task));
+        }
         ArrayList<Object> procsToKill = null;
         ArrayMap<String, SparseArray<WindowProcessController>> pmap =
                 mService.mProcessNames.getMap();
@@ -2595,6 +2602,17 @@ public class ActivityTaskSupervisor implements RecentTasks.Callbacks {
                                 "restartActivityProcessTimeout");
                     }
                 } break;
+                case STRICT_STANDBY_KILL_MSG: {
+                    Task task = (Task) msg.obj;
+                    String pkg = task.getBaseIntent().getComponent().getPackageName();
+                    try {
+                        ActivityManager.getService().forceStopPackage(pkg, task.mUserId);
+                    } catch (RemoteException e) {
+                        Slog.e(TAG, "Strict standby force stop failed...");
+                    }
+                    mService.mAppStandbyInternal.restrictApp(
+                            pkg, task.mUserId, REASON_MAIN_FORCED_BY_USER, 0);
+                } break;
             }
         }
 
-- 
2.25.1

