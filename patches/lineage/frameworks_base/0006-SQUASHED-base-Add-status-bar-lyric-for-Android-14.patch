From 90d6d854de9068fb1e57444824d570ad03e54b22 Mon Sep 17 00:00:00 2001
From: cjybyjk <cjybyjk@zjnu.edu.cn>
Date: Fri, 29 Jul 2022 17:12:24 +0800
Subject: [PATCH 2/3] [SQUASHED] base: Add status bar lyric for Android 14

* This is a squash of:

base: Add status bar lyric [1/3]

Signed-off-by: cjybyjk <cjybyjk@zjnu.edu.cn>
Change-Id: I5c49187b0752286ee00a60d961203c0c4ec0d555

fixup! base: Add status bar lyric [1/3]

 * java.lang.SecurityException: Settings key: <status_bar_show_lyric> is
   not readable. From S+, settings keys annotated with @hide are
   restricted to system_server and system apps only, unless they are
   annotated with @Readable.

Change-Id: Ia0c209f3ddd5bbe1be676e172f408b3faf8cfe81

base: Adapt StatusBar Lyric for Miku UI Udon

Signed-off-by: AmeChanRain <downloadbot007@gmail.com>

api: Set FLAG_ALWAYS_SHOW_TICKER & FLAG_ONLY_UPDATE_TICKER as

Change-Id: Icf95f54bb3b7fdda0e52efe027d61f6039663d4c

fixup! [SQUASH]base: Add status bar lyric for Android 14

Co-authored-by: LynnrinChan <wuxiaofei31@gmail.com>
Co-authored-by: AmeChanRain <downloadbot007@gmail.com>
Change-Id: I55d8299268a633de9b8b9fcb1d9ebab7dbe901fc
---
 core/api/current.txt                          |   2 +
 core/api/lint-baseline.txt                    |   4 +
 core/java/android/app/Notification.java       |   4 +
 core/java/android/provider/Settings.java      |  12 +
 packages/SystemUI/res/layout/status_bar.xml   |   2 +
 .../SystemUI/res/layout/status_bar_lyric.xml  |  55 +++++
 .../SystemUI/res/values/lineage_dimens.xml    |   4 +
 .../SystemUI/res/values/lineage_styles.xml    |  22 ++
 .../src/com/android/systemui/Dependency.java  |   3 +
 .../systemui/statusbar/StatusBarIconView.java |   2 +-
 .../collection/NotifCollection.java           |   4 +
 .../phone/HeadsUpAppearanceController.java    |  12 +
 .../statusbar/phone/LyricViewController.java  | 220 ++++++++++++++++++
 .../fragment/CollapsedStatusBarFragment.java  |  50 +++-
 .../android/systemui/tuner/TunerService.java  |   8 +
 .../android/systemui/util/LyricTextView.java  | 150 ++++++++++++
 16 files changed, 552 insertions(+), 2 deletions(-)
 create mode 100644 packages/SystemUI/res/layout/status_bar_lyric.xml
 create mode 100644 packages/SystemUI/res/values/lineage_styles.xml
 create mode 100644 packages/SystemUI/src/com/android/systemui/statusbar/phone/LyricViewController.java
 create mode 100644 packages/SystemUI/src/com/android/systemui/util/LyricTextView.java

diff --git a/core/api/current.txt b/core/api/current.txt
index 62980ed5bd69..c5d8dd716fdb 100644
--- a/core/api/current.txt
+++ b/core/api/current.txt
@@ -6487,6 +6487,7 @@ package android.app {
     field public static final String EXTRA_TITLE_BIG = "android.title.big";
     field public static final String EXTRA_VERIFICATION_ICON = "android.verificationIcon";
     field public static final String EXTRA_VERIFICATION_TEXT = "android.verificationText";
+    field public static final int FLAG_ALWAYS_SHOW_TICKER = 16777216; // 0x1000000
     field public static final int FLAG_AUTO_CANCEL = 16; // 0x10
     field public static final int FLAG_BUBBLE = 4096; // 0x1000
     field public static final int FLAG_FOREGROUND_SERVICE = 64; // 0x40
@@ -6497,6 +6498,7 @@ package android.app {
     field public static final int FLAG_NO_CLEAR = 32; // 0x20
     field public static final int FLAG_ONGOING_EVENT = 2; // 0x2
     field public static final int FLAG_ONLY_ALERT_ONCE = 8; // 0x8
+    field public static final int FLAG_ONLY_UPDATE_TICKER = 33554432; // 0x2000000
     field @Deprecated public static final int FLAG_SHOW_LIGHTS = 1; // 0x1
     field public static final int FOREGROUND_SERVICE_DEFAULT = 0; // 0x0
     field public static final int FOREGROUND_SERVICE_DEFERRED = 2; // 0x2
diff --git a/core/api/lint-baseline.txt b/core/api/lint-baseline.txt
index 1b0da055038d..bbd836c70276 100644
--- a/core/api/lint-baseline.txt
+++ b/core/api/lint-baseline.txt
@@ -1516,6 +1516,10 @@ UnflaggedApi: android.telephony.PhoneNumberUtils#isWpsCallNumber(String):
     New API must be flagged with @FlaggedApi: method android.telephony.PhoneNumberUtils.isWpsCallNumber(String)
 UnflaggedApi: android.telephony.TelephonyManager#PURCHASE_PREMIUM_CAPABILITY_RESULT_USER_DISABLED:
     New API must be flagged with @FlaggedApi: field android.telephony.TelephonyManager.PURCHASE_PREMIUM_CAPABILITY_RESULT_USER_DISABLED
+UnflaggedApi: android.app.Notification#FLAG_ALWAYS_SHOW_TICKER:
+    New API must be flagged with @FlaggedApi: field android.app.Notification.FLAG_ALWAYS_SHOW_TICKER
+UnflaggedApi: android.app.Notification#FLAG_ONLY_UPDATE_TICKER:
+    New API must be flagged with @FlaggedApi: field android.app.Notification.FLAG_ONLY_UPDATE_TICKER
 UnflaggedApi: android.text.DynamicLayout.Builder#setLineBreakConfig(android.graphics.text.LineBreakConfig):
     New API must be flagged with @FlaggedApi: method android.text.DynamicLayout.Builder.setLineBreakConfig(android.graphics.text.LineBreakConfig)
 UnflaggedApi: android.text.DynamicLayout.Builder#setUseBoundsForWidth(boolean):
diff --git a/core/java/android/app/Notification.java b/core/java/android/app/Notification.java
index 1129f9dbdfeb..657e9713aac2 100644
--- a/core/java/android/app/Notification.java
+++ b/core/java/android/app/Notification.java
@@ -746,6 +746,10 @@ public class Notification implements Parcelable
      */
     @TestApi
     public static final int FLAG_USER_INITIATED_JOB = 0x00008000;
+    
+    public static final int FLAG_ALWAYS_SHOW_TICKER = 0x01000000;
+
+    public static final int FLAG_ONLY_UPDATE_TICKER = 0x02000000;
 
     /**
      * Bit to be bitwise-ored into the {@link #flags} field that should be
diff --git a/core/java/android/provider/Settings.java b/core/java/android/provider/Settings.java
index b6693fb22bb8..c00bbc12e315 100644
--- a/core/java/android/provider/Settings.java
+++ b/core/java/android/provider/Settings.java
@@ -12401,6 +12401,18 @@ public final class Settings {
          */
         public static final String LOCK_SCREEN_WEATHER_ENABLED = "lockscreen_weather_enabled";
 
+        /**
+         * Show lyric in status bar when playing music
+         * <ul>
+         *    <li> 0 = disabled </li>
+         *    <li> 1 = enabled </li>
+         * </ul>
+         *
+         * @hide
+         */
+        @Readable
+        public static final String STATUS_BAR_SHOW_LYRIC = "status_bar_show_lyric";
+
         /**
          * Whether the feature that the device will fire a haptic when users scroll and hit
          * the edge of the screen is enabled.
diff --git a/packages/SystemUI/res/layout/status_bar.xml b/packages/SystemUI/res/layout/status_bar.xml
index f739eb63a06c..5336649b84ee 100644
--- a/packages/SystemUI/res/layout/status_bar.xml
+++ b/packages/SystemUI/res/layout/status_bar.xml
@@ -70,6 +70,8 @@
                 android:layout_gravity="center_vertical|start"
                 android:clipChildren="false">
 
+                <include layout="@layout/status_bar_lyric" />
+
                 <include layout="@layout/heads_up_status_bar_layout" />
 
                 <!-- The alpha of the start side is controlled by PhoneStatusBarTransitions, and the
diff --git a/packages/SystemUI/res/layout/status_bar_lyric.xml b/packages/SystemUI/res/layout/status_bar_lyric.xml
new file mode 100644
index 000000000000..1b6bc7ba19bb
--- /dev/null
+++ b/packages/SystemUI/res/layout/status_bar_lyric.xml
@@ -0,0 +1,55 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  - Copyright 2020 The exTHmUI Open Source Project
+  -           2022 Project Kaleidoscope
+  -
+  - Licensed under the Apache License, Version 2.0 (the "License");
+  - you may not use this file except in compliance with the License.
+  - You may obtain a copy of the License at
+  -
+  -     http://www.apache.org/licenses/LICENSE-2.0
+  -
+  - Unless required by applicable law or agreed to in writing, software
+  - distributed under the License is distributed on an "AS IS" BASIS,
+  - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  - See the License for the specific language governing permissions and
+  - limitations under the License.
+  -->
+<LinearLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/lyric_container"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:gravity="center_vertical"
+    android:visibility="gone"
+    android:orientation="horizontal"
+    android:paddingEnd="@dimen/lyric_padding_end">
+
+    <ImageSwitcher android:id="@+id/lyric_icon"
+        android:layout_width="@dimen/status_bar_icon_size"
+        android:layout_height="@dimen/status_bar_icon_size"
+        android:layout_marginEnd="@dimen/lyric_icon_margin_end">
+        <ImageView
+            android:layout_width="@dimen/status_bar_icon_size"
+            android:layout_height="@dimen/status_bar_icon_size"
+            android:scaleType="centerInside" />
+        <ImageView
+            android:layout_width="@dimen/status_bar_icon_size"
+            android:layout_height="@dimen/status_bar_icon_size"
+            android:scaleType="centerInside" />
+    </ImageSwitcher>
+    <TextSwitcher android:id="@+id/lyric_text"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content">
+        <com.android.systemui.util.LyricTextView
+            android:textAppearance="@style/TextApperance.StatusBar.Lyric"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:maxLines="1" />
+        <com.android.systemui.util.LyricTextView
+            android:textAppearance="@style/TextApperance.StatusBar.Lyric"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:maxLines="1" />
+    </TextSwitcher>
+</LinearLayout>
\ No newline at end of file
diff --git a/packages/SystemUI/res/values/lineage_dimens.xml b/packages/SystemUI/res/values/lineage_dimens.xml
index ca6e7db4c5b1..a860dfab083e 100644
--- a/packages/SystemUI/res/values/lineage_dimens.xml
+++ b/packages/SystemUI/res/values/lineage_dimens.xml
@@ -24,4 +24,8 @@
 
     <!-- Screen Record -->
     <dimen name="screenrecord_dot_size">48dp</dimen>
+
+    <!-- Lyric -->
+    <dimen name="lyric_icon_margin_end">4dp</dimen>
+    <dimen name="lyric_padding_end">4dp</dimen>
 </resources>
diff --git a/packages/SystemUI/res/values/lineage_styles.xml b/packages/SystemUI/res/values/lineage_styles.xml
new file mode 100644
index 000000000000..9a9bf30e3a07
--- /dev/null
+++ b/packages/SystemUI/res/values/lineage_styles.xml
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2018-2022 The LineageOS Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<resources>
+    <style name="TextApperance.StatusBar.Lyric" parent="@*android:style/TextAppearance.StatusBar">
+        <item name="android:textSize">14sp</item>
+        <item name="android:fontFamily">@*android:string/config_bodyFontFamily</item>
+    </style>
+</resources>
diff --git a/packages/SystemUI/src/com/android/systemui/Dependency.java b/packages/SystemUI/src/com/android/systemui/Dependency.java
index c7ee99c5f20a..dccc9bff6ef9 100644
--- a/packages/SystemUI/src/com/android/systemui/Dependency.java
+++ b/packages/SystemUI/src/com/android/systemui/Dependency.java
@@ -48,6 +48,7 @@ import com.android.systemui.plugins.statusbar.StatusBarStateController;
 import com.android.systemui.recents.OverviewProxyService;
 import com.android.systemui.settings.UserTracker;
 import com.android.systemui.statusbar.CommandQueue;
+import com.android.systemui.statusbar.NotificationListener;
 import com.android.systemui.statusbar.NotificationMediaManager;
 import com.android.systemui.statusbar.NotificationRemoteInputManager;
 import com.android.systemui.statusbar.notification.collection.render.GroupExpansionManager;
@@ -160,6 +161,7 @@ public class Dependency {
     @Inject Lazy<NavigationBarController> mNavigationBarController;
     @Inject Lazy<StatusBarStateController> mStatusBarStateController;
     @Inject Lazy<NotificationMediaManager> mNotificationMediaManager;
+    @Inject Lazy<NotificationListener> mNotificationListener;
     @Inject @Background Lazy<Looper> mBgLooper;
     @Inject @Main Lazy<Handler> mMainHandler;
     @Inject @Named(TIME_TICK_HANDLER_NAME) Lazy<Handler> mTimeTickHandler;
@@ -220,6 +222,7 @@ public class Dependency {
         mProviders.put(NavigationBarController.class, mNavigationBarController::get);
         mProviders.put(StatusBarStateController.class, mStatusBarStateController::get);
         mProviders.put(NotificationMediaManager.class, mNotificationMediaManager::get);
+        mProviders.put(NotificationListener.class, mNotificationListener::get);
         mProviders.put(SysUiState.class, mSysUiStateFlagsContainer::get);
         mProviders.put(CommandQueue.class, mCommandQueue::get);
         mProviders.put(MediaOutputDialogFactory.class, mMediaOutputDialogFactory::get);
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/StatusBarIconView.java b/packages/SystemUI/src/com/android/systemui/statusbar/StatusBarIconView.java
index bb6ee24b0ffe..f5f03aebb3c9 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/StatusBarIconView.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/StatusBarIconView.java
@@ -487,7 +487,7 @@ public class StatusBarIconView extends AnimatedImageView implements StatusIconDi
      * @return Drawable for this item, or null if the package or item could not
      *         be found
      */
-    private Drawable getIcon(Context sysuiContext,
+    public static Drawable getIcon(Context sysuiContext,
             Context context, StatusBarIcon statusBarIcon) {
         int userId = statusBarIcon.user.getIdentifier();
         if (userId == UserHandle.USER_ALL) {
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/notification/collection/NotifCollection.java b/packages/SystemUI/src/com/android/systemui/statusbar/notification/collection/NotifCollection.java
index 7b3a93a4a094..33b4b60e28dc 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/notification/collection/NotifCollection.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/notification/collection/NotifCollection.java
@@ -536,6 +536,10 @@ public class NotifCollection implements Dumpable, PipelineDumpable {
 
             mLogger.logNotifUpdated(entry);
             mEventQueue.add(new EntryUpdatedEvent(entry, true /* fromSystem */));
+            // update ticker only, LyricController will handle it
+            if ((entry.getSbn().getNotification().flags & Notification.FLAG_ONLY_UPDATE_TICKER) != 0) {
+                return;
+            }
         }
     }
 
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/HeadsUpAppearanceController.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/HeadsUpAppearanceController.java
index d76aab9c3fb2..c666f132aa90 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/HeadsUpAppearanceController.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/HeadsUpAppearanceController.java
@@ -112,6 +112,8 @@ public class HeadsUpAppearanceController extends ViewController<HeadsUpStatusBar
     private final FeatureFlagsClassic mFeatureFlags;
     private final HeadsUpNotificationIconInteractor mHeadsUpNotificationIconInteractor;
 
+    private LyricViewController mLyricViewController;
+
     @VisibleForTesting
     @Inject
     public HeadsUpAppearanceController(
@@ -265,6 +267,10 @@ public class HeadsUpAppearanceController extends ViewController<HeadsUpStatusBar
         }
     }
 
+    public void setLyricViewController(LyricViewController controller) {
+        mLyricViewController = controller;
+    }
+
     private void setShown(boolean isShown) {
         if (mShown != isShown) {
             View clockView = mClockController.getClock();
@@ -278,6 +284,9 @@ public class HeadsUpAppearanceController extends ViewController<HeadsUpStatusBar
                     hide(mClockView, View.INVISIBLE);
                 }
                 mOperatorNameViewOptional.ifPresent(view -> hide(view, View.INVISIBLE));
+                if (mLyricViewController != null) {
+                    mLyricViewController.hideLyricView(mAnimationsEnabled);
+                }
             } else {
                 if (!isRightClock) {
                     show(mClockView);
@@ -286,6 +295,9 @@ public class HeadsUpAppearanceController extends ViewController<HeadsUpStatusBar
                 hide(mView, View.GONE, () -> {
                     updateParentClipping(true /* shouldClip */);
                 });
+                if (mLyricViewController != null) {
+                    mLyricViewController.showLyricView(mAnimationsEnabled);
+                }
             }
             // Show the status bar icons when the view gets shown / hidden
             if (mStatusBarStateController.getState() != StatusBarState.SHADE) {
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/LyricViewController.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/LyricViewController.java
new file mode 100644
index 000000000000..23858fa2664f
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/LyricViewController.java
@@ -0,0 +1,220 @@
+/*
+ * Copyright (C) 2022 Project Kaleidoscope
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.systemui.statusbar.phone;
+
+import android.app.Notification;
+import android.content.Context;
+import android.content.res.ColorStateList;
+import android.graphics.Rect;
+import android.graphics.drawable.Drawable;
+import android.service.notification.NotificationListenerService;
+import android.service.notification.NotificationListenerService.RankingMap;
+import android.service.notification.StatusBarNotification;
+import android.text.TextUtils;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.animation.Animation;
+import android.view.animation.AnimationUtils;
+import android.widget.ImageSwitcher;
+import android.widget.ImageView;
+import android.widget.TextSwitcher;
+import android.widget.TextView;
+
+import com.android.internal.statusbar.StatusBarIcon;
+import com.android.internal.util.ContrastColorUtil;
+import com.android.systemui.Dependency;
+import com.android.systemui.R;
+import com.android.systemui.plugins.DarkIconDispatcher;
+import com.android.systemui.statusbar.NotificationListener;
+import com.android.systemui.statusbar.StatusBarIconView;
+
+import java.util.ArrayList;
+
+public abstract class LyricViewController implements
+    DarkIconDispatcher.DarkReceiver,
+    NotificationListener.NotificationHandler {
+
+    private static final String EXTRA_TICKER_ICON = "ticker_icon";
+    private static final String EXTRA_TICKER_ICON_SWITCH = "ticker_icon_switch";
+
+    private static final int HIDE_LYRIC_DELAY = 1200;
+
+    private final Context mContext;
+    private final ImageSwitcher mIconSwitcher;
+    private final TextSwitcher mTextSwitcher;
+    private final View mLyricContainer;
+
+    private final ContrastColorUtil mNotificationColorUtil;
+
+    private boolean mEnabled;
+    private boolean mStarted;
+
+    private String mCurrentNotificationPackage = null;
+    private int mCurrentNotificationId;
+
+    private ColorStateList mTintColorStateList;
+
+    public LyricViewController(Context context, View statusBar) {
+        mContext = context;
+        mLyricContainer = statusBar.findViewById(R.id.lyric_container);
+        mIconSwitcher = statusBar.findViewById(R.id.lyric_icon);
+        mTextSwitcher = statusBar.findViewById(R.id.lyric_text);
+
+        mNotificationColorUtil = ContrastColorUtil.getInstance(mContext);
+
+        Animation animationIn = AnimationUtils.loadAnimation(mContext,
+                com.android.internal.R.anim.push_up_in);
+        Animation animationOut = AnimationUtils.loadAnimation(mContext,
+                com.android.internal.R.anim.push_up_out);
+
+        mTextSwitcher.setInAnimation(animationIn);
+        mTextSwitcher.setOutAnimation(animationOut);
+        mIconSwitcher.setInAnimation(animationIn);
+        mIconSwitcher.setOutAnimation(animationOut);
+
+        mLyricContainer.setOnTouchListener((v, event) -> {
+            if (event.getAction() == MotionEvent.ACTION_DOWN) {
+                hideLyricView(true);
+                v.postDelayed(() -> showLyricView(true), HIDE_LYRIC_DELAY);
+            }
+            return false;
+        });
+
+        Dependency.get(DarkIconDispatcher.class).addDarkReceiver(this);
+        Dependency.get(NotificationListener.class).addNotificationHandler(this);
+    }
+
+    public void setEnabled(boolean enabled) {
+        mEnabled = enabled;
+        if (!mEnabled && mStarted) {
+            stopLyric();
+        }
+    }
+
+    public boolean isEnabled() {
+        return mEnabled;
+    }
+
+    @Override
+    public void onNotificationPosted(StatusBarNotification sbn, RankingMap rankingMap) {
+        if (!mEnabled) return;
+
+        Notification notification = sbn.getNotification();
+        boolean isLyric = ((notification.flags & Notification.FLAG_ALWAYS_SHOW_TICKER) != 0)
+                && ((notification.flags & Notification.FLAG_ONLY_UPDATE_TICKER) != 0);
+
+        boolean isCurrentNotification = mCurrentNotificationId == sbn.getId() &&
+                TextUtils.equals(sbn.getPackageName(), mCurrentNotificationPackage);
+        if (!isLyric) {
+            if (isCurrentNotification) {
+                stopLyric();
+            }
+        } else {
+            mCurrentNotificationPackage = sbn.getPackageName();
+            mCurrentNotificationId = sbn.getId();
+
+            if (notification.tickerText == null) {
+                stopLyric();
+                return;
+            }
+            if (!isCurrentNotification || !mStarted ||
+                    notification.extras.getBoolean(EXTRA_TICKER_ICON_SWITCH, false)) {
+                int iconId = notification.extras.getInt(EXTRA_TICKER_ICON, -1);
+                Drawable icon = iconId == -1 ? notification.getSmallIcon().loadDrawable(mContext) :
+                        StatusBarIconView.getIcon(mContext, sbn.getPackageContext(mContext),
+                                new StatusBarIcon(sbn.getPackageName(), sbn.getUser(),
+                                    iconId, notification.iconLevel, 0, null));
+                mIconSwitcher.setImageDrawable(icon);
+                updateIconTint();
+            }
+            startLyric();
+            mTextSwitcher.setText(notification.tickerText);
+        }
+    }
+
+    public void onNotificationRemoved(StatusBarNotification sbn, RankingMap rankingMap) {
+        boolean isCurrentNotification = mCurrentNotificationId == sbn.getId() &&
+                TextUtils.equals(sbn.getPackageName(), mCurrentNotificationPackage);
+        if (isCurrentNotification) {
+            stopLyric();
+        }
+    }
+
+    @Override
+    public void onNotificationRemoved(StatusBarNotification sbn, RankingMap rankingMap, int reason) {
+        onNotificationRemoved(sbn, rankingMap);
+    }
+
+    @Override
+    public void onNotificationRankingUpdate(RankingMap rankingMap) {
+    }
+
+    @Override
+    public void onNotificationsInitialized() {
+    }
+
+    public void startLyric() {
+        if (!mStarted) {
+            mStarted = true;
+            showLyricView(true);
+        }
+    }
+
+    public void stopLyric() {
+        if (mStarted) {
+            mStarted = false;
+            hideLyricView(true);
+            mCurrentNotificationPackage = null;
+            mCurrentNotificationId = 0;
+        }
+    }
+
+    public abstract void showLyricView(boolean animate);
+
+    public abstract void hideLyricView(boolean animate);
+
+    public boolean isLyricStarted() {
+        return mStarted;
+    }
+
+    public View getView() {
+        return mLyricContainer;
+    }
+
+    private void updateIconTint() {
+        Drawable drawable = ((ImageView)mIconSwitcher.getCurrentView()).getDrawable();
+        boolean isGrayscale = mNotificationColorUtil.isGrayscaleIcon(drawable);
+        if (isGrayscale) {
+            ((ImageView) mIconSwitcher.getCurrentView()).setImageTintList(mTintColorStateList);
+            ((ImageView) mIconSwitcher.getNextView()).setImageTintList(mTintColorStateList);
+        } else {
+            ((ImageView) mIconSwitcher.getCurrentView()).setImageTintList(null);
+            ((ImageView) mIconSwitcher.getNextView()).setImageTintList(null);
+        }
+    }
+
+    @Override
+    public void onDarkChanged(ArrayList<Rect> area, float darkIntensity, int tint) {
+        int tintColor = DarkIconDispatcher.getTint(area, mLyricContainer, tint);
+
+        ((TextView) mTextSwitcher.getCurrentView()).setTextColor(tintColor);
+        ((TextView) mTextSwitcher.getNextView()).setTextColor(tintColor);
+
+        mTintColorStateList = ColorStateList.valueOf(tintColor);
+        updateIconTint();
+    }
+}
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/fragment/CollapsedStatusBarFragment.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/fragment/CollapsedStatusBarFragment.java
index f3229ef2970c..8fb68168a2c1 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/fragment/CollapsedStatusBarFragment.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/fragment/CollapsedStatusBarFragment.java
@@ -17,6 +17,7 @@ package com.android.systemui.statusbar.phone.fragment;
 import android.annotation.Nullable;
 import android.annotation.SuppressLint;
 import android.app.Fragment;
+import android.content.Context;
 import android.database.ContentObserver;
 import android.os.Bundle;
 import android.os.Parcelable;
@@ -38,6 +39,7 @@ import androidx.core.animation.Animator;
 import com.android.app.animation.Interpolators;
 import com.android.app.animation.InterpolatorsAndroidX;
 import com.android.keyguard.KeyguardUpdateMonitor;
+import com.android.systemui.Dependency;
 import com.android.systemui.Dumpable;
 import com.android.systemui.dagger.qualifiers.Main;
 import com.android.systemui.demomode.DemoMode;
@@ -54,6 +56,7 @@ import com.android.systemui.statusbar.StatusBarState;
 import com.android.systemui.statusbar.disableflags.DisableFlagsLogger.DisableState;
 import com.android.systemui.statusbar.events.SystemStatusAnimationCallback;
 import com.android.systemui.statusbar.events.SystemStatusAnimationScheduler;
+import com.android.systemui.statusbar.phone.LyricViewController;
 import com.android.systemui.statusbar.notification.icon.ui.viewbinder.NotificationIconContainerStatusBarViewBinder;
 import com.android.systemui.statusbar.notification.shared.NotificationIconContainerRefactor;
 import com.android.systemui.statusbar.phone.ClockController;
@@ -75,6 +78,7 @@ import com.android.systemui.statusbar.pipeline.shared.ui.viewmodel.CollapsedStat
 import com.android.systemui.statusbar.policy.KeyguardStateController;
 import com.android.systemui.statusbar.window.StatusBarWindowStateController;
 import com.android.systemui.statusbar.window.StatusBarWindowStateListener;
+import com.android.systemui.tuner.TunerService;
 import com.android.systemui.util.CarrierConfigTracker;
 import com.android.systemui.util.CarrierConfigTracker.CarrierConfigChangedListener;
 import com.android.systemui.util.CarrierConfigTracker.DefaultDataSubscriptionChangedListener;
@@ -102,7 +106,7 @@ import kotlinx.coroutines.DisposableHandle;
 @SuppressLint("ValidFragment")
 public class CollapsedStatusBarFragment extends Fragment implements CommandQueue.Callbacks,
         StatusBarStateController.StateListener,
-        SystemStatusAnimationCallback, Dumpable {
+        SystemStatusAnimationCallback, Dumpable, TunerService.Tunable {
 
     public static final String TAG = "CollapsedStatusBarFragment";
     private static final String EXTRA_PANEL_STATE = "panel_state";
@@ -159,6 +163,7 @@ public class CollapsedStatusBarFragment extends Fragment implements CommandQueue
     private final DemoModeController mDemoModeController;
 
     private ClockController mClockController;
+    private LyricController mLyricController;
 
     private List<String> mBlockedIcons = new ArrayList<>();
     private Map<Startable, Startable.State> mStartableStates = new ArrayMap<>();
@@ -367,6 +372,9 @@ public class CollapsedStatusBarFragment extends Fragment implements CommandQueue
         showClock(false);
         initOperatorName();
         initNotificationIconArea();
+        mLyricController = new LyricController(getContext(), mStatusBar);
+        mStatusBarFragmentComponent.getHeadsUpAppearanceController().setLyricViewController(mLyricController);
+        Dependency.get(TunerService.class).addTunable(this, Settings.Secure.STATUS_BAR_SHOW_LYRIC);
         mSystemEventAnimator = getSystemEventAnimator();
         mCarrierConfigTracker.addCallback(mCarrierConfigCallback);
         mCarrierConfigTracker.addDefaultDataSubscriptionChangedListener(mDefaultDataListener);
@@ -467,6 +475,15 @@ public class CollapsedStatusBarFragment extends Fragment implements CommandQueue
         }
     }
 
+    @Override
+    public void onTuningChanged(String key, String newValue) {
+        if (key.equals(Settings.Secure.STATUS_BAR_SHOW_LYRIC)) {
+            if (mLyricController != null) {
+                mLyricController.setEnabled(TunerService.parseIntegerSwitch(newValue, false));
+            }
+        }
+    }
+
     /** Initializes views related to the notification icon area. */
     public void initNotificationIconArea() {
         Trace.beginSection("CollapsedStatusBarFragment#initNotifIconArea");
@@ -604,8 +621,14 @@ public class CollapsedStatusBarFragment extends Fragment implements CommandQueue
         // Hide notifications if the disable flag is set or we have an ongoing call.
         if (disableNotifications || hasOngoingCall) {
             hideNotificationIconArea(animate && !hasOngoingCall);
+            if (mLyricController != null) {
+                mLyricController.hideLyricView(animate);
+            }
         } else {
             showNotificationIconArea(animate);
+            if (mLyricController != null) {
+                mLyricController.showLyricView(animate);
+            }
         }
 
         // Show the ongoing call chip only if there is an ongoing call *and* notification icons
@@ -932,4 +955,29 @@ public class CollapsedStatusBarFragment extends Fragment implements CommandQueue
             pw.decreaseIndent();
         }
     }
+
+    private class LyricController extends LyricViewController {
+        private View mLeftSide;
+
+        public LyricController(Context context, View statusBar) {
+            super(context, statusBar);
+            mLeftSide = statusBar.findViewById(R.id.status_bar_start_side_except_heads_up);
+        }
+
+        public void showLyricView(boolean animate) {
+            StatusBarVisibilityModel visibilityModel = mLastModifiedVisibility;
+
+            boolean disableNotifications = !visibilityModel.getShowNotificationIcons();
+            boolean hasOngoingCall = visibilityModel.getShowOngoingCallChip();
+            if (!disableNotifications && !hasOngoingCall && isLyricStarted()) {
+                animateHide(mLeftSide, animate);
+                animateShow(getView(), animate);
+            }
+        }
+
+        public void hideLyricView(boolean animate) {
+            animateHide(getView(), animate);
+            animateShow(mLeftSide, animate);
+        }
+    }
 }
diff --git a/packages/SystemUI/src/com/android/systemui/tuner/TunerService.java b/packages/SystemUI/src/com/android/systemui/tuner/TunerService.java
index a501e87902a8..64939022c8fe 100644
--- a/packages/SystemUI/src/com/android/systemui/tuner/TunerService.java
+++ b/packages/SystemUI/src/com/android/systemui/tuner/TunerService.java
@@ -80,4 +80,12 @@ public abstract class TunerService {
             return defaultValue;
         }
     }
+
+    public static int parseInteger(String value, int defaultValue) {
+	try {
+	    return value != null ? Integer.parseInt(value) : defaultValue;
+	} catch (NumberFormatException e) {
+	    return defaultValue;
+	}
+    }
 }
diff --git a/packages/SystemUI/src/com/android/systemui/util/LyricTextView.java b/packages/SystemUI/src/com/android/systemui/util/LyricTextView.java
new file mode 100644
index 000000000000..3a6f4a948415
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/util/LyricTextView.java
@@ -0,0 +1,150 @@
+/*
+ * Copyright (C) 2020 The exTHmUI Open Source Project
+ *               2022 Project Kaleidoscope
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.systemui.util;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.icu.text.Bidi;
+import android.util.AttributeSet;
+import android.view.View;
+import android.widget.TextView;
+
+public class LyricTextView extends TextView {
+
+    private boolean mStopped = true;
+    private int mTextWidth;
+    private int mScrollSpeed = 4;
+    private int mOffset = 0;
+    private String mText;
+    private boolean mTextRtl;
+
+    private static final int START_SCROLL_DELAY = 500;
+    private static final int INVALIDATE_DELAY = 10;
+
+    private final Runnable mStartScrollRunnable = this::startScroll;
+    private final Runnable mInvalidateRunnable = this::invalidate;
+
+    public LyricTextView(Context context) {
+        this(context, null);
+    }
+
+    public LyricTextView(Context context, AttributeSet attrs) {
+        this(context, attrs, 0); // com.android.internal.R.attr.textViewStyle
+    }
+
+    public LyricTextView(Context context, AttributeSet attrs, int defStyleAttr) {
+        this(context, attrs, defStyleAttr, 0);
+    }
+
+    public LyricTextView(Context context, AttributeSet attrs, int defStyleAttr,
+                         int defStyleRes) {
+        super(context, attrs, defStyleAttr, defStyleRes);
+    }
+
+    @Override
+    protected void onDetachedFromWindow() {
+        removeCallbacks(mStartScrollRunnable);
+        super.onDetachedFromWindow();
+    }
+
+    @Override
+    protected void onTextChanged(CharSequence text, int start, int lengthBefore, int lengthAfter) {
+        super.onTextChanged(text, start, lengthBefore, lengthAfter);
+        stopScroll();
+        if (text != null) {
+            mText = text.toString();
+            mTextRtl = Bidi.getBaseDirection(mText) == Bidi.RTL;
+            if (mTextRtl) {
+                getPaint().setTextAlign(Paint.Align.RIGHT);
+                mOffset = -1;
+            } else {
+                getPaint().setTextAlign(Paint.Align.LEFT);
+                if (View.LAYOUT_DIRECTION_RTL == getLayoutDirection()) {
+                    mOffset = -1;
+                } else {
+                    mOffset = 0;
+                }
+            }
+            mTextWidth = (int) getPaint().measureText(mText);
+            postInvalidate();
+            postDelayed(mStartScrollRunnable, START_SCROLL_DELAY);
+        } else {
+            mText = null;
+        }
+    }
+
+    @Override
+    public void setTextColor(int color) {
+        getPaint().setColor(color);
+        postInvalidate();
+    }
+
+    @Override
+    protected void onDraw(Canvas canvas) {
+        boolean viewRtl = View.LAYOUT_DIRECTION_RTL == getLayoutDirection();
+        if (mTextRtl && mOffset == -1) {
+            mOffset = getWidth();
+        } else if (viewRtl && mOffset == -1) {
+            mOffset = Math.max(0, getWidth() - mTextWidth);
+        }
+        if (canvas != null && mText != null) {
+            float y = getHeight() / 2.0f + Math.abs(getPaint().ascent() + getPaint().descent()) / 2;
+            canvas.drawText(mText, mOffset, y, getPaint());
+        }
+        if (!mStopped) {
+            if (!mTextRtl) {
+                if (getWidth() - mOffset + mScrollSpeed >= mTextWidth) {
+                    mOffset = getWidth() > mTextWidth && !viewRtl ? 0 : getWidth() - mTextWidth;
+                    stopScroll();
+                } else {
+                    mOffset -= mScrollSpeed;
+                }
+            } else {
+                if (mOffset + mScrollSpeed >= mTextWidth) {
+                    mOffset = Math.max(getWidth(), mTextWidth);
+                    stopScroll();
+                } else {
+                    mOffset += mScrollSpeed;
+                }
+            }
+            invalidateAfter(INVALIDATE_DELAY);
+        }
+    }
+
+    private void invalidateAfter(long delay) {
+        removeCallbacks(mInvalidateRunnable);
+        postDelayed(mInvalidateRunnable, delay);
+    }
+
+
+    public void startScroll() {
+        mStopped = false;
+        postInvalidate();
+    }
+
+    public void stopScroll() {
+        mStopped = true;
+        removeCallbacks(mStartScrollRunnable);
+        postInvalidate();
+    }
+
+    public void setScrollSpeed(int scrollSpeed) {
+        this.mScrollSpeed = scrollSpeed;
+    }
+}
-- 
2.25.1

