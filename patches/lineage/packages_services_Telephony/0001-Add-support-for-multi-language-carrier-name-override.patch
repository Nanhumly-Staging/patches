From c8aac95ec2c26952925d651246d9aa56467c8245 Mon Sep 17 00:00:00 2001
From: cjybyjk <cjybyjk@zjnu.edu.cn>
Date: Fri, 11 Feb 2022 19:11:29 +0800
Subject: [PATCH] Add support for multi-language carrier name override

Change-Id: Iadc4251ef37193392d0967caa77797fb46762eed
---
 .../android/phone/CarrierConfigLoader.java    | 78 +++++++++++++++++++
 1 file changed, 78 insertions(+)

diff --git a/src/com/android/phone/CarrierConfigLoader.java b/src/com/android/phone/CarrierConfigLoader.java
index d565c4911..3859bcce9 100644
--- a/src/com/android/phone/CarrierConfigLoader.java
+++ b/src/com/android/phone/CarrierConfigLoader.java
@@ -40,6 +40,7 @@ import android.os.Bundle;
 import android.os.Handler;
 import android.os.HandlerExecutor;
 import android.os.IBinder;
+import android.os.LocaleList;
 import android.os.Looper;
 import android.os.Message;
 import android.os.PermissionEnforcer;
@@ -69,6 +70,7 @@ import com.android.internal.telephony.IccCardConstants;
 import com.android.internal.telephony.Phone;
 import com.android.internal.telephony.PhoneConfigurationManager;
 import com.android.internal.telephony.PhoneFactory;
+import com.android.internal.telephony.ServiceStateTracker;
 import com.android.internal.telephony.TelephonyPermissions;
 import com.android.internal.telephony.flags.FeatureFlags;
 import com.android.internal.telephony.subscription.SubscriptionManagerService;
@@ -146,6 +148,9 @@ public class CarrierConfigLoader extends ICarrierConfigLoader.Stub {
     // Broadcast receiver for system events
     @NonNull
     private final BroadcastReceiver mSystemBroadcastReceiver = new ConfigLoaderBroadcastReceiver();
+    // Broadcast receiver for Intent.ACTION_LOCALE_CHANGED
+    @NonNull
+    private final BroadcastReceiver mLocaleReceiver = new ConfigLoaderBroadcastReceiver();
     @NonNull private final LocalLog mCarrierConfigLoadingLog = new LocalLog(256);
     // Number of phone instances (active modem count)
     private int mNumPhones;
@@ -195,6 +200,8 @@ public class CarrierConfigLoader extends ICarrierConfigLoader.Stub {
     // Fetching config timed out from the default app for no SIM config.
     private static final int EVENT_FETCH_DEFAULT_FOR_NO_SIM_CONFIG_TIMEOUT = 22;
     // NOTE: any new EVENT_* values must be added to method eventToString().
+    // User changed the locale settings
+    private static final int EVENT_LOCALE_CHANGED = 23;
 
     private static final int BIND_TIMEOUT_MILLIS = 30000;
 
@@ -302,6 +309,7 @@ public class CarrierConfigLoader extends ICarrierConfigLoader.Stub {
 
                     config = restoreConfigFromXml(mPlatformCarrierConfigPackage, "", phoneId);
                     if (config != null) {
+                        putLocalCarrierNameToConfig(config);
                         mConfigFromDefaultApp[phoneId] = config;
                         Message newMsg = obtainMessage(EVENT_FETCH_DEFAULT_DONE, phoneId, -1);
                         newMsg.getData().putBoolean("loaded_from_xml", true);
@@ -363,6 +371,7 @@ public class CarrierConfigLoader extends ICarrierConfigLoader.Stub {
                                             resultData.getParcelable(KEY_CONFIG_BUNDLE);
                                     saveConfigToXml(mPlatformCarrierConfigPackage, "", phoneId,
                                             carrierId, config);
+                                    putLocalCarrierNameToConfig(config);
                                     mConfigFromDefaultApp[phoneId] = config;
                                     sendMessage(
                                             obtainMessage(
@@ -431,6 +440,7 @@ public class CarrierConfigLoader extends ICarrierConfigLoader.Stub {
                     final PersistableBundle config =
                             restoreConfigFromXml(carrierPackageName, "", phoneId);
                     if (config != null) {
+                        putLocalCarrierNameToConfig(config);
                         mConfigFromCarrierApp[phoneId] = config;
                         Message newMsg = obtainMessage(EVENT_FETCH_CARRIER_DONE, phoneId, -1);
                         newMsg.getData().putBoolean("loaded_from_xml", true);
@@ -491,6 +501,7 @@ public class CarrierConfigLoader extends ICarrierConfigLoader.Stub {
                                     saveConfigToXml(getCarrierPackageForPhoneId(phoneId), "",
                                             phoneId, carrierId, config);
                                     if (config != null) {
+                                        putLocalCarrierNameToConfig(config);
                                         mConfigFromCarrierApp[phoneId] = config;
                                     } else {
                                         logdWithLocalLog("Config from carrier app is null "
@@ -689,6 +700,16 @@ public class CarrierConfigLoader extends ICarrierConfigLoader.Stub {
                                         phoneId, -1), BIND_TIMEOUT_MILLIS);
                     break;
                 }
+
+                case EVENT_LOCALE_CHANGED: {
+                    logd("Locale changed.");
+                    for (int i = 0; i < TelephonyManager.from(mContext).getActiveModemCount(); ++i) {
+                        putLocalCarrierNameToConfig(mConfigFromDefaultApp[i]);
+                        updateSubscriptionDatabase(i);
+                        updateCarrierNameForPhoneId(i);
+                    }
+                    break;
+                }
             }
         }
     }
@@ -716,6 +737,10 @@ public class CarrierConfigLoader extends ICarrierConfigLoader.Stub {
         systemEventsFilter.addAction(Intent.ACTION_BOOT_COMPLETED);
         context.registerReceiver(mSystemBroadcastReceiver, systemEventsFilter);
 
+        IntentFilter localeFilter = new IntentFilter();
+        localeFilter.addAction(Intent.ACTION_LOCALE_CHANGED);
+        context.registerReceiver(mLocaleReceiver, localeFilter);
+
         mNumPhones = TelephonyManager.from(context).getActiveModemCount();
         mConfigFromDefaultApp = new PersistableBundle[mNumPhones];
         mConfigFromCarrierApp = new PersistableBundle[mNumPhones];
@@ -793,6 +818,54 @@ public class CarrierConfigLoader extends ICarrierConfigLoader.Stub {
         }
     }
 
+    private void updateCarrierNameForPhoneId(int phoneId) {
+        Phone phone = PhoneFactory.getPhone(phoneId);
+        if (phone != null) {
+            ServiceStateTracker serviceStateTracker = phone.getServiceStateTracker();
+            serviceStateTracker.updateSpnDisplay();
+        }
+    }
+
+    private static void putLocalCarrierNameToConfig(PersistableBundle config) {
+        if (config == null) {
+            return;
+        }
+
+        LocaleList localeList = LocaleList.getDefault();
+        String localCarrierName = null;
+
+        String defaultKey = CarrierConfigManager.KEY_CARRIER_NAME_STRING + "_default";
+        String defaultCarrierName = config.getString(defaultKey, null);
+        if (TextUtils.isEmpty(defaultCarrierName)) {
+            defaultCarrierName = config.getString(CarrierConfigManager.KEY_CARRIER_NAME_STRING, null);
+            config.putString(defaultKey, defaultCarrierName);
+        }
+
+        for (int i = 0; i < localeList.size(); i++) {
+            final Locale locale = localeList.get(i);
+            final String keyWithLang = CarrierConfigManager.KEY_CARRIER_NAME_STRING + "_" + locale.getLanguage();
+            final String keyWithLangAndCountry = keyWithLang + "-r" + locale.getCountry();
+
+            localCarrierName = config.getString(keyWithLangAndCountry, null);
+            if (TextUtils.isEmpty(localCarrierName)) {
+                localCarrierName = config.getString(keyWithLang, null);
+            }
+            if (TextUtils.isEmpty(localCarrierName)) {
+                for (String key : config.keySet()) {
+                    if (key.startsWith(keyWithLang)) {
+                        localCarrierName = config.getString(key, null);
+                        break;
+                    }
+                }
+            }
+            if (!TextUtils.isEmpty(localCarrierName)) {
+                config.putString(CarrierConfigManager.KEY_CARRIER_NAME_STRING, localCarrierName);
+                return;
+            }
+        }
+        config.putString(CarrierConfigManager.KEY_CARRIER_NAME_STRING, defaultCarrierName);
+    }
+
     private void updateSubscriptionDatabase(int phoneId) {
         logd("updateSubscriptionDatabase: phoneId=" + phoneId);
         String configPackageName;
@@ -1939,6 +2012,9 @@ public class CarrierConfigLoader extends ICarrierConfigLoader.Stub {
                 case Intent.ACTION_BOOT_COMPLETED:
                     mHandler.sendMessage(mHandler.obtainMessage(EVENT_SYSTEM_UNLOCKED, null));
                     break;
+                case Intent.ACTION_LOCALE_CHANGED:
+                    mHandler.sendMessage(mHandler.obtainMessage(EVENT_LOCALE_CHANGED, null));
+                    break;
             }
         }
     }
@@ -2023,6 +2099,8 @@ public class CarrierConfigLoader extends ICarrierConfigLoader.Stub {
                 return "EVENT_BIND_DEFAULT_FOR_NO_SIM_CONFIG_TIMEOUT";
             case EVENT_FETCH_DEFAULT_FOR_NO_SIM_CONFIG_TIMEOUT:
                 return "EVENT_FETCH_DEFAULT_FOR_NO_SIM_CONFIG_TIMEOUT";
+            case EVENT_LOCALE_CHANGED:
+                return "EVENT_LOCALE_CHANGED";
             default:
                 return "UNKNOWN(" + code + ")";
         }
-- 
2.25.1

